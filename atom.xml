<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Qi Tang's Blog]]></title>
  <subtitle><![CDATA[你不能把这个世界，让给你所鄙视的人]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://itangqi.me/"/>
  <updated>2016-04-13T09:08:58.000Z</updated>
  <id>http://itangqi.me/</id>
  
  <author>
    <name><![CDATA[Qi Tang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[UICollectionView 学习笔记]]></title>
    <link href="http://itangqi.me/2016/04/13/the-notes-of-learning-uicollectionview/"/>
    <id>http://itangqi.me/2016/04/13/the-notes-of-learning-uicollectionview/</id>
    <published>2016-04-12T16:00:00.000Z</published>
    <updated>2016-04-13T09:08:58.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近计划着开个新项目，前期工作准备先撸个图片选择器出来。当然核心肯定是 PhotoKit (ASsetsLibrary) 啦，不过那些会在稍后文章中介绍，今天的主角则是 <strong>UICollectionView</strong>。</p>
<a id="more"></a> 
<hr>
<h2 id="简介">简介</h2><p>首先看苹果官方文档 <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionView_class/" target="_blank" rel="external">UICollectionView Class Reference</a> 的介绍:</p>
<blockquote>
<p>The UICollectionView class manages an ordered collection of data items and presents them using customizable layouts. Collection views provide the same general function as table views except that a collection view is able to support more than just single-column layouts. Collection views support customizable layouts that can be used to implement multi-column grids, tiled layouts, circular layouts, and many more. You can even change the layout of a collection view dynamically if you want.</p>
</blockquote>
<p>一句话总结就是：UICollectionView 与 UITableView 相似，却提供了可自定义多列网格（Grild）的功能。</p>
<hr>
<h2 id="核心">核心</h2><ul>
<li><p><strong>Cells</strong>：单元格，用于展示内容的主体</p>
</li>
<li><p><strong>Supplementary Views</strong>：追加视图，相当于 UITableView 中每个 Section 的 Header 或 Footer</p>
</li>
<li><p><strong>Decoration Views</strong>：装饰视图，用于装饰整个 UICollectionView</p>
</li>
</ul>
<p>UICollectionView 最常见的使用场景，想必就是相册（照片墙）的实现与展示了，下面通过一张图来直观地认识 CollectionView 各部分的构成：</p>
<p><img src="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionView_class/Art/uicollectionview_callouts.png" alt=""></p>
<hr>
<h2 id="实现">实现</h2><p>如果你在之前有了解及使用过 UITableView 的话，那么恭喜你，你将会快速上手 UICollectionView。</p>
<h3 id="UICollectionViewDataSource">UICollectionViewDataSource</h3><p>UICollectionViewDataSource - 负责提供展示的数据，实现下面两个必须的委托方法，其实 UITableView 并无二意，所以在此不做过多介绍了。</p>
<ul>
<li><p><strong>numberOfItemsInSection</strong>：某个 section 里有多少个 item</p>
</li>
<li><p><strong>cellForItemAtIndexPath</strong>：对于某个位置应该显示什么样的 cell，里面会涉及到 cell 的复用，可参见 TableView</p>
</li>
</ul>
<p>其实到这里，CollectionView 就可以正常显示了，对吧，就是这么简单：）</p>
<h3 id="UICollectionViewDelegate">UICollectionViewDelegate</h3><p>UICollectionViewDelegate - 负责用户的交互、Cell 的外形，委托方法和 TableView 相似，可以选择性实现以下委托方法。</p>
<ul>
<li><p><strong>collectionView:shouldHighlightItemAtIndexPath</strong>：是否支持高亮？</p>
</li>
<li><p><strong>collectionView:didHighlightItemAtIndexPath</strong>：如果支持高亮，那么高亮；</p>
</li>
<li><p><strong>collectionView:shouldSelectItemAtIndexPath</strong>：询问是否可以被选中？</p>
</li>
<li><p><strong>collectionView:didUnhighlightItemAtIndexPath</strong>：如果支持高亮，那么现在取消高亮；</p>
</li>
<li><p><strong>collectionView:didSelectItemAtIndexPath</strong>：如果支持可以被选中，那么选中 cell；</p>
</li>
</ul>
<p>下面再通过几张图来更加清晰地理解：</p>
<p><img src="http://static.oschina.net/uploads/img/201312/09104249_WdaM.jpg" alt=""><br><img src="http://static.oschina.net/uploads/img/201312/09104249_oFzN.jpg" alt=""><br><img src="http://static.oschina.net/uploads/img/201312/09104249_WIyz.jpg" alt=""></p>
<h3 id="UICollectionViewLayout">UICollectionViewLayout</h3><p>在布局上，与 UITableView 直接使用系统提供的样式不同，UICollectionView 使用的是 UICollectionViewLayout 来自定义布局样式。</p>
<p>在苹果官方文档：<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionViewLayout_class/" target="_blank" rel="external">UICollectionViewLayout Class Reference</a> 中对其做了如下解释:</p>
<blockquote>
<p>The UICollectionViewLayout class is an abstract base class that you subclass and use to generate layout information for a collection view. The job of a layout object is to determine the placement of cells, supplementary views, and decoration views inside the collection view’s bounds and to report that information to the collection view when asked. The collection view then applies the provided layout information to the corresponding views so that they can be presented onscreen.</p>
</blockquote>
<p>这里做下简短的总结：</p>
<ol>
<li><p>UICollectionViewLayout 是一个抽象基类，你需要继承自他，来为 CollectionView 生成 Layout 信息。Layout 对象的作用是决定 Cells，Supplementary Views 和 Decoration Views 在 CollectionView 中的布局位置。当然啦，如果你不想折腾，苹果也贴心的为你准备了 UICollectionViewFlowLayout - 流水式布局效果。</p>
</li>
<li><p>UICollectionView 的显示效果几乎全部由 UICollectionViewLayout 负责，而真正存储着每一个 Cell 的位置、大小等属性的是 UICollectionViewLayoutAttributes 。每一个 Cell 对应着一个属于自己的 UICollectionViewLayoutAttributes，而 UICollectionViewLayout 正是利用 UICollectionViewLayoutAttributes 里存在的信息对每一个 Cell 进行布局。</p>
</li>
</ol>
<p>下面通过一张图来了解 UICollectionView 的构成：</p>
<p><img src="http://static.oschina.net/uploads/img/201312/09104250_0t6H.jpg" alt=""></p>
<h2 id="总结">总结</h2><p>可以说 UICollectionView 是 iOS 开发中必不可少的 UIKit 控件之一。</p>
<h2 id="参考">参考</h2><ul>
<li><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionView_class/" target="_blank" rel="external">UICollectionView Class Reference</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionViewLayout_class/" target="_blank" rel="external">UICollectionViewLayout Class Reference</a></li>
<li><a href="http://www.appcoda.com/ios-programming-uicollectionview-tutorial/" target="_blank" rel="external">Create Grid Layout Using UICollectionView in iOS 6</a></li>
<li><a href="http://my.oschina.net/sunqichao/blog/182623" target="_blank" rel="external">UICollectionView 使用 介绍</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>最近计划着开个新项目，前期工作准备先撸个图片选择器出来。当然核心肯定是 PhotoKit (ASsetsLibrary) 啦，不过那些会在稍后文章中介绍，今天的主角则是 <strong>UICollectionView</strong>。</p>]]>
    
    </summary>
    
      <category term="Notes" scheme="http://itangqi.me/tags/Notes/"/>
    
      <category term="iOS" scheme="http://itangqi.me/tags/iOS/"/>
    
      <category term="iOS" scheme="http://itangqi.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Objective-C 高级编程》读书笔记之 GCD]]></title>
    <link href="http://itangqi.me/2016/03/15/the-notes-of-learning-of-gcd/"/>
    <id>http://itangqi.me/2016/03/15/the-notes-of-learning-of-gcd/</id>
    <published>2016-03-14T16:00:00.000Z</published>
    <updated>2016-04-13T08:42:22.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本文作为《Objective-C 高级编程》读书笔记的第三篇，也是最后一篇，给大家带来的是关于 Grand Central Dispatch (GCD) 的知识点总结。</p>
<a id="more"></a> 
<hr>
<h2 id="概念">概念</h2><p>Grand Central Dispatch (GCD) 是异步执行任务的技术之一。开发者只需要定义想执行的任务并追加到适当的 Dispatch Queue 中，GCD 就能生成必要的线程并计划执行任务。由于线程管理是作为系统的一部分来实现的，因此可统一管理，也可执行任务，这样就比以前的线程更有效率。</p>
<p>以下摘自苹果的官方文档：</p>
<blockquote>
<p>Grand Central Dispatch (GCD) comprises language features, runtime libraries, and system enhancements that provide systemic, comprehensive improvements to the support for concurrent code execution on multicore hardware in iOS and OS X.</p>
<p>The BSD subsystem, CoreFoundation, and Cocoa APIs have all been extended to use these enhancements to help both the system and your application to run faster, more efficiently, and with improved responsiveness. </p>
</blockquote>
<p>一句话总结就是：<strong>GCD 用我们难以置信的非常简洁的记述方法，实现了极为复杂繁琐的多线程编程，可以说这是一项划时代的技术。</strong></p>
<hr>
<h2 id="多线程编程">多线程编程</h2><p>在讲多线程之前，首先来复习下相关概念：</p>
<ul>
<li><p><strong>进程</strong>：一个具有一定独立功能的程序关于某个数据集合的一次运行活动，进程是系统进行资源分配和调度的一个独立单位，可以理解成一个运行中的应用程序。</p>
</li>
<li><p><strong>线程</strong>：进程的一个实体，是 CPU 调度和分派的基本单位。线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈)，但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p>
</li>
<li><p><strong>上下文切换（Context Switch）</strong>：当一个进程中有多个线程来回切换时，Context Switch 用来记录执行状态，这样的进程和一般的多线程进程没有太大差别，但会产生一些额外的开销。</p>
</li>
</ul>
<p>由于使用多线程的程序可以在某个线程和其他线程之间反复多次进行上下文切换，因此看上去就好像 1 个 CPU 核能够并列地执行多个线程一样。而且在具有多个 CPU 核的情况下，就不是「看上去像」了，而是真的提供了多个 CPU 核并行执行多个线程的技术。</p>
<p>这种利用多线程编程的技术就被称为「多线程编程」。</p>
<h3 id="多线程编程的问题">多线程编程的问题</h3><p>但是，多线程编程实际上是一种易发生各种问题的编程技术。比如多个线程更新相同的资源会导致数据的不一致（数据竞争）、停止等待事件的线程会导致多个线程相互持续等待（死锁）、使用太多线程会消耗大量内存等。如下图所示：</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-gcd-001.png" alt=""><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-gcd-002.png" alt=""><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-gcd-003.png" alt=""></p>
<h3 id="多线程编程的优点">多线程编程的优点</h3><p>尽管极易发生各种问题，也应当使用多线程编程。这是为什么呢？因为使用多线程编程可以保证应用程序的响应性能。</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-gcd-004.png" alt=""></p>
<p>使用多线程编程，在执行长时间的处理时仍可保证用户界面的响应性能。</p>
<p>GCD 大大简化了偏于复杂的多线程编程的实现。接下来我们就来看下 GCD 的 API。</p>
<hr>
<h2 id="GCD_的_API">GCD 的 API</h2><p>关于 GCD 相关 API 的详细讲解与使用案例，可以直接参见官方文档或者其他博客，本文仅对我在学习 GCD 过程中觉得难以理解的知识点进行简单总结。</p>
<h3 id="Dispatch_Queue">Dispatch Queue</h3><p>首先回顾一下苹果官方对 GCD 的说明：<strong>开发者要做的只是定义想执行的任务并追加到适当的 Dispatch Queue 中。</strong></p>
<p>那么「Dispatch Queue」是什么呢？</p>
<p>如其名称所示，是执行处理的等待队列。应用程序编程人员通过 dispatch_async 函数等 API，在 Block 语法中记述想执行的处理并将其追加到 Dispatch Queue 中。<strong>Dispatch Queue</strong> 按照追加的顺序（先进先出 FIFO，First-In-First-Out）执行处理。</p>
<p>GCD 提供两种 Dispatch Queue:</p>
<table>
<thead>
<tr>
<th>Dispatch Queue 的种类</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>Serial Dispatch Queue</td>
<td style="text-align:center">等待现在执行中处理结束</td>
<td style="text-align:center">多个线程更新相同资源导致数据竞争时 </td>
</tr>
<tr>
<td>Concurrent Dispatch Queue</td>
<td style="text-align:center">不等待现在执行中处理结束</td>
<td style="text-align:center">并行执行不发生数据竞争等问题的处理时</td>
</tr>
</tbody>
</table>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-gcd-005.png" alt=""></p>
<h3 id="dispatch_queue_create/dispatch_retain/dispatch_release">dispatch_queue_create/dispatch_retain/dispatch_release</h3><p>Dispatch Queue 也像 Objective-C 的引用计数式内存管理一样，需要通过 dispatch_retain 函数和 dispatch_release 函数的引用计数来管理内存。</p>
<p><strong>如果你部署的最低目标低于 iOS 6.0 or Mac OS X 10.8</strong></p>
<ul>
<li>你应该自己管理 GCD 对象,使用 dispatch_retain/dispatch_release</li>
</ul>
<p><strong>如果你部署的最低目标是 iOS 6.0 or Mac OS X 10.8 或者更高</strong></p>
<ul>
<li>ARC 已经能够管理 GCD 对象了，这时候 GCD 对象就如同普通的 OC 对象一样，不用再 dispatch_retain/dispatch_release  </li>
</ul>
<h3 id="Main_Dispatch_Queue/Global_Dispatch_Queue">Main Dispatch Queue/Global Dispatch Queue</h3><p>实际上不用特意生成 Dispatch Queue 系统也会给我们提供几个，那就是 Main Dispatch Queue 和 Global Dispatch Queue：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">Dispatch Queue 的种类</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Main Dispatch Queue</td>
<td style="text-align:center">Serial Dispatch Queue</td>
<td style="text-align:center">主线程执行</td>
</tr>
<tr>
<td>Global Dispatch Queue（High Priority）</td>
<td style="text-align:center">Concurrent Dispatch Queue</td>
<td style="text-align:center">执行优先级：高（最高优先）</td>
</tr>
<tr>
<td>Global Dispatch Queue（Default Priority）</td>
<td style="text-align:center">Concurrent Dispatch Queue</td>
<td style="text-align:center">执行优先级：默认</td>
</tr>
<tr>
<td>Global Dispatch Queue（Low Priority）</td>
<td style="text-align:center">Concurrent Dispatch Queue</td>
<td style="text-align:center">执行优先级：低</td>
</tr>
<tr>
<td>Global Dispatch Queue（Background Priority）</td>
<td style="text-align:center">Concurrent Dispatch Queue</td>
<td style="text-align:center">执行优先级：后台</td>
</tr>
</tbody>
</table>
<h3 id="dispatch_set_target_queue">dispatch_set_target_queue</h3><p>将 Dispatch Queue 指定为 dispatch_set_target_queue 函数的参数，不仅可以变更 Dispatch Queue 的执行优先级。还可以作成 Dispatch Queue 的执行阶层。如果在多个 Serial Dispatch Queue 中用 dispatch_set_target_queue 函数指定目标为某一个 Serial Dispatch Queue，那么原先本应并行执行的多个 Serial Dispatch Queue，在目标 Serial Dispatch Queue 上只能同时执行一个处理。</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-gcd-006.png" alt=""></p>
<p>在必须将可不并行执行的处理追加到多个 Serial Dispatch Queue 中时，如果使用 dispatch_set_target_queue 函数将目标指定为某一个 Serial Dispatch Queue，即可防止处理并行执行。</p>
<h3 id="dispatch_barrier_async">dispatch_barrier_async</h3><p>dispatch_barrier_async 函数会等待追加到 Concurrent Dispatch Queue 上的并行执行的处理全部结束后，再将指定的处理追加到该 Concurrent Dispatch Queue 中。然后在由 dispatch_barrier_async 函数追加的处理执行完毕后，Concurrent Dispatch Queue 才恢复为一般的动作，追加到该 Concurrent Dispatch Queue 的处理又开始并行执行。</p>
<p>使用方法非常简单，如图所示：</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-gcd-007.png" alt=""></p>
<h3 id="Dispatch_Semaphore">Dispatch Semaphore</h3><p>Dispatch Semaphore 是持有计数的信号，该计数是多线程编程中的计数类型信号。所谓信号，类似于过马路时常用的手旗。可以通过时举起手旗，不可通过时放下手旗。而 Dispatch Semaphore 中，使用计数来实现该功能。</p>
<p>信号量的具体做法是：当信号计数大于 0 时，每条进来的线程使计数减 1，直到变为 0，变为 0 后其他的线程将进不来，处于等待状态；执行完任务的线程释放信号，使计数加 1，如此循环下去。</p>
<hr>
<h2 id="要点">要点</h2><ol>
<li><p>多个 Serial Dispatch Queue 可并行执行，但生成过线程，就会消耗大量内存，引起大量的上下文切换，大幅度降低系统的响应性能</p>
</li>
<li><p>dispatch_afer 函数并不是在指定时间后执行处理，而只是在指定时间追加处理到 Dispatch Queue</p>
</li>
<li><p>无论向什么样的 Dispatch Queue 中追加处理，使用 Dispatch Group 都可监视这些处理执行的结束。一旦监测到所有处理执行结束，就可将结束的处理追加到 Dispatch Queue 中。这就是使用 Dispatch Group 的原因</p>
</li>
<li><p>关于 dispatch_sync，不得不提<strong>死锁</strong>，详情可参见：<a href="http://www.saitjr.com/ios/ios-gcd-deadlock.html" target="_blank" rel="external">GCD死锁</a> </p>
</li>
<li><p>Serial Dispatch Queue 与 Concurrent Dispatch Queue 都是遵循 FIFO 原则</p>
</li>
<li><p>dispatch_once 方法用 <code>dispatch_once_t</code> 来测试 Block 是否被执行过了。如果执行过了，那么就不在执行，<code>dispatch_once_t</code> 必须是全局或 static 变量</p>
</li>
<li><p>dispatch_create 函数生成的 Dispatch Queue 不管是 Serial Dispatch Queue 还是 Concurrent Dispatch Queue，都使用与默认优先级 Global Dispatch Queue 相同执行优先级的线程</p>
</li>
<li><p>并发与并行的区别：<a href="https://www.zhihu.com/question/33515481" target="_blank" rel="external">https://www.zhihu.com/question/33515481</a></p>
</li>
</ol>
<hr>
<h2 id="参考">参考</h2><ul>
<li><a href="https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/" target="_blank" rel="external">Grand Central Dispatch (GCD) Reference</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>本文作为《Objective-C 高级编程》读书笔记的第三篇，也是最后一篇，给大家带来的是关于 Grand Central Dispatch (GCD) 的知识点总结。</p>]]>
    
    </summary>
    
      <category term="GCD" scheme="http://itangqi.me/tags/GCD/"/>
    
      <category term="Notes" scheme="http://itangqi.me/tags/Notes/"/>
    
      <category term="iOS" scheme="http://itangqi.me/tags/iOS/"/>
    
      <category term="iOS" scheme="http://itangqi.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Objective-C 高级编程》读书笔记之 Blocks]]></title>
    <link href="http://itangqi.me/2016/03/13/the-notes-of-learning-of-blocks/"/>
    <id>http://itangqi.me/2016/03/13/the-notes-of-learning-of-blocks/</id>
    <published>2016-03-12T16:00:00.000Z</published>
    <updated>2016-04-13T09:34:10.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本文作为《Objective-C 高级编程》读书笔记的第二篇，给大家带来的是关于 Blocks 的知识点总结。</p>
<a id="more"></a> 
<hr>
<h2 id="概念">概念</h2><p>Blocks 是 C 语言的扩充功能，可以用一句话来表示 Blocks 的扩充功能：带有自动变量（局部变量）的匿名函数。（Blocks 是闭包在 OC 语言中的实现，并不是 iOS 独有的概念，在 C++、Java 等语言也有实现闭包，只是名称不同而已）</p>
<hr>
<h2 id="优势">优势</h2><ol>
<li><p>可代替 Delegate 完成回调，而不需要像 Delegate 那样繁琐</p>
</li>
<li><p>在某些方面，可代替 selector（如 NSNotificationCenter 在 addObserver 的时候，可以使用 block，而不用单独定义方法）</p>
</li>
<li><p>延长对象的生命周期（Block 会自动持有对象）</p>
</li>
<li><p>提高代码的复用性和可读性</p>
</li>
<li><p>常用于：View 动画、GCD、网络异步请求</p>
</li>
</ol>
<hr>
<h2 id="语法">语法</h2><p>关于 Blocks 的语法，看下面一张图就可以啦：</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/How%20Do%20I%20Declare%20A%20Block%20in%20Objective%20C%20.png" alt=""></p>
<hr>
<h2 id="Blocks_的实现">Blocks 的实现</h2><h3 id="Blocks_的数据结构">Blocks 的数据结构</h3><p><img src="http://www.galloway.me.uk/media/images/2013-05-26-a-look-inside-blocks-episode-3-block-copy/block_layout.png" alt=""></p>
<p>对应的结构体定义如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Block_descriptor &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> reserved;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">void</span> (*<span class="keyword">copy</span>)(<span class="keyword">void</span> *dst, <span class="keyword">void</span> *src);</span><br><span class="line">    <span class="keyword">void</span> (*dispose)(<span class="keyword">void</span> *);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Block_layout &#123;</span><br><span class="line">    <span class="keyword">void</span> *isa;</span><br><span class="line">    <span class="keyword">int</span> flags;</span><br><span class="line">    <span class="keyword">int</span> reserved;</span><br><span class="line">    <span class="keyword">void</span> (*invoke)(<span class="keyword">void</span> *, ...);</span><br><span class="line">    <span class="keyword">struct</span> Block_descriptor *descriptor;</span><br><span class="line">    <span class="comment">/* Imported variables. */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>通过该图，我们可以知道，一个 Block 实例实际上由 6 部分构成：</p>
<ol>
<li><p><strong>isa 指针</strong>: 所有对象都有该指针，用于实现对象相关的功能</p>
</li>
<li><p><strong>flags</strong>: 用于按 bit 位表示一些 block 的附加信息，本文后面介绍 block copy 的实现代码可以看到对该变量的使用；</p>
</li>
<li><p><strong>reserved</strong>: 保留变量；</p>
</li>
<li><p><strong>invoke</strong>: 函数指针，指向具体的 block 实现的函数调用地址；</p>
</li>
<li><p><strong>descriptor</strong>: 表示该 block 的附加描述信息，主要是 size 大小，以及 copy 和 dispose 函数的指针；</p>
</li>
<li><p><strong>variables</strong>: capture 过来的变量，block 能够访问它外部的局部变量，就是因为将这些变量（或变量的地址）复制到了结构体中；</p>
</li>
</ol>
<hr>
<h2 id="Block_存储域">Block 存储域</h2><h3 id="Objective-C_中的_Stack_和_Heap">Objective-C 中的 Stack 和 Heap</h3><p>首先所有的 Objective-C 对象都是分配在 Heap 的。 在 OC 最典型的内存分配与初始化就是这样的：</p>
<pre><code>NSObject *obj = <span class="comment">[<span class="comment">[NSObject alloc]</span> init]</span>;
</code></pre><p>一个对象在 alloc 的时候，就在 Heap 分配了内存空间。</p>
<p>Stack 对象通常有速度的优势，而且不会发生内存泄露问题。那么为什么 OC 的对象都是分配在 Heap 的呢？ 原因在于：</p>
<ul>
<li><p>Stack 对象的生命周期所导致的问题。例如一旦函数返回，则所在的 Stack Frame（栈帧）就会被销毁。那么此时返回的对象也会一并销毁。这个时候我们去 retain 这个对象是无效的。因为整个 Stack Frame 都已经被销毁了。简单而言，就是 Stack 对象的生命周期不适合 OC 的引用计数内存管理方法。</p>
</li>
<li><p>Stack 对象不够灵活，不具备足够的扩展性。创建时长度已经是固定的,而stack对象的拥有者也就是所在的 Stack Frame</p>
</li>
</ul>
<h3 id="Block_类型">Block 类型</h3><p>应用程序的内存分配：</p>
<p><img src="http://blogofzuoyebuluo.qiniudn.com/image_note57603_2.png" alt=""></p>
<p>在 OC 中，一共有 3 种类型的 Block：</p>
<h4 id="_NSConcreteGlobalBlock">_NSConcreteGlobalBlock</h4><p>_NSConcreteGlobalBlock：全局的静态 Block，不会访问任何外部变量。</p>
<p><img src="http://blogofzuoyebuluo.qiniudn.com/image_note57603_3.png" alt=""></p>
<h4 id="_NSConcreteStackBlock">_NSConcreteStackBlock</h4><p>_NSConcreteStackBlock：保存在栈中的 Block，当函数返回时会被销毁。（ARC 中系统实现了自动 copy, 将创建在栈上的 Block 自动拷贝到堆上，所以不存在此类型的 Block）</p>
<h4 id="_NSConcreteMallocBlock">_NSConcreteMallocBlock</h4><p>_NSConcreteMallocBlock：保存在堆中的 Block，当引用计数为 0 时会被销毁。（即成为正常的 OC 对象）</p>
<p><img src="http://blogofzuoyebuluo.qiniudn.com/image_note57603_4.png" alt=""></p>
<hr>
<h2 id="Block_循环引用">Block 循环引用</h2><p>如果在 Block 中使用附有 __strong 修饰符的对象类型自动变量，那么当 Block 从栈复制到堆时，该对象为 Block 所持有，于是便导致了循环引用的产生。</p>
<p>如图所示：self 持有 Block，Block 持有 self，这正是循环引用。</p>
<p><img src="http://blogofzuoyebuluo.qiniudn.com/image_note58470_2.png" alt=""></p>
<h3 id="MRC">MRC</h3><p>在 MRC 下，使用 __block 说明符来避免 Block 中的循环引用。</p>
<p>这是由于当 Block 从栈复制到堆时，若 Block 使用的变量为附有 <strong>block 说明符的 id 类型或对象类型的自动变量，不会被 retain；若 Block 使用的变量为没有 </strong>block 说明符的 id 类型或对象类型的自动变量，则被 retain；若 Block 使用的变量为没有 __block 说明符的 id 类型或对象类型的自动变量，则被 retain。</p>
<h3 id="ARC">ARC</h3><p>在 ARC 下，为了避免这种情况发生，可以在变量声明时用 <strong>weak 修饰符修饰变量 self，让 block 不强引用 self，从而破除循环。iOS4 和 Snow Leopard 由于对 weak 的支持不够完全，可以用 </strong>unsafe_unretained 代替。</p>
<p>使用 Block 成员变量避免循环引用：</p>
<p><img src="http://blogofzuoyebuluo.qiniudn.com/image_note58470_3.png" alt=""></p>
<h3 id="比较">比较</h3><p>下面对使用 <strong>block 变量避免循环引用的方法和使用 </strong>weak 修饰符及 __unsafe_unretained 修饰符避免循环引用的方法做个比较。</p>
<h4 id="使用___block_变量的优点如下：">使用 __block 变量的优点如下：</h4><ul>
<li>通过 <code>__block</code> 变量可控制对象的持有期间</li>
<li><p>在不能使用 <code>__weak</code> 修饰符的环境中不使用 <code>__unsafe_unretained</code> 修饰符即可（不必担心<a href="https://en.wikipedia.org/wiki/Dangling_pointer" target="_blank" rel="external">悬垂指针</a>）</p>
<p>  在执行 Block 时可动态地决定是否将 nil 或其他对象赋值在 <code>__block</code> 变量中。</p>
</li>
</ul>
<h4 id="使用___block_变量的缺点如下：">使用 __block 变量的缺点如下：</h4><ul>
<li><p>为避免循环引用必须执行 Block</p>
<p>  存在执行了 Block 语法，却不执行 Block 的路径时，无法避免循环引用。若由于 Block 引发了循环引用时，根据 Block 的用途选择使用 <code>__block</code> 变量、<code>__weak</code> 修饰符或 <code>__unsafe_unretained</code> 修饰符来避免循环引用。</p>
</li>
</ul>
<hr>
<h2 id="要点">要点</h2><ol>
<li><p>Block 执行的代码其实在编译的时候就已经准备好了</p>
</li>
<li><p>本身 Block 就是一个普通的 OC 对象。正因为它是对象，Block 可以被作为参数传递，可以作为返回值从一个方法返回，可以用来给变量赋值</p>
</li>
<li><p>__block 修饰符在 MRC 下不会进行引用计数加 1，而 ARC 下则会加 1</p>
</li>
<li><p>对于 Block 外的变量引用，Block 默认是将其复制到其数据结构中来实现访问的</p>
</li>
<li><p>对于用 __block 修饰的外部变量引用，Block 是复制其引用地址来实现访问的</p>
</li>
</ol>
<hr>
<h2 id="参考">参考</h2><ul>
<li><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html" target="_blank" rel="external">Working with Blocks</a></li>
<li><a href="http://goshdarnblocksyntax.com/" target="_blank" rel="external">How Do I Declare A Block in Objective-C?</a></li>
<li><a href="http://blog.devtang.com/2013/07/28/a-look-inside-blocks/" target="_blank" rel="external">谈Objective-C block的实现</a></li>
<li><a href="https://github.com/100mango/zen/blob/master/Objective-C%20%E6%8B%BE%E9%81%97%EF%BC%9A%E4%BB%8EHeap%20and%20Stack%E5%88%B0Block%20/Objective-C%20%E6%8B%BE%E9%81%97%EF%BC%9A%E4%BB%8EHeap%20and%20Stack%E5%88%B0Block%20.md" target="_blank" rel="external">Objective-C 拾遗：从Heap and Stack到Block</a></li>
<li><a href="https://www.zybuluo.com/MicroCai/note/51116" target="_blank" rel="external">block没那么难（一）：block的实现</a></li>
<li><a href="http://tanqisen.github.io/blog/2013/04/19/gcd-block-cycle-retain/" target="_blank" rel="external">正确使用Block避免Cycle Retain和Crash</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>本文作为《Objective-C 高级编程》读书笔记的第二篇，给大家带来的是关于 Blocks 的知识点总结。</p>]]>
    
    </summary>
    
      <category term="Blocks" scheme="http://itangqi.me/tags/Blocks/"/>
    
      <category term="Notes" scheme="http://itangqi.me/tags/Notes/"/>
    
      <category term="iOS" scheme="http://itangqi.me/tags/iOS/"/>
    
      <category term="iOS" scheme="http://itangqi.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Objective-C 高级编程》读书笔记之 ARC]]></title>
    <link href="http://itangqi.me/2016/03/10/the-notes-of-learning-of-arc/"/>
    <id>http://itangqi.me/2016/03/10/the-notes-of-learning-of-arc/</id>
    <published>2016-03-09T16:00:00.000Z</published>
    <updated>2016-04-13T09:36:30.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本文作为《Objective-C 高级编程》读书笔记的第一篇，给大家带来的是关于 ARC（Automatic Reference Counting）自动引用计数的知识点总结。</p>
<a id="more"></a> 
<hr>
<h2 id="概念">概念</h2><p>顾名思义，ARC（Automatic Reference Counting）— 自动引用计数，是指内存管理中对引用采取自动计数的技术。以下摘自苹果的官方文档：</p>
<blockquote>
<p>Automatic Reference Counting (ARC) is a compiler feature that provides automatic memory management of Objective-C objects. Rather than having to think about retain and release operations, ARC allows you to concentrate on the interesting code, the object graphs, and the relationships between objects in your application.</p>
</blockquote>
<p>一句话总结就是：<strong>在 LLVM 编译器中设置 ARC 为有效状态，就无需再次键入 retain 或者是 release 代码。</strong></p>
<hr>
<h2 id="MRC">MRC</h2><p>在介绍 ARC 之前，不得不提 MRC (MannulReference Counting) — 手动引用计数，即指内存管理中对引用采取手动计数的技术。</p>
<h3 id="引用计数">引用计数</h3><p>我们需要知道 Objective-C 采用的是引用计数式的内存管理方式，这一方式的特点是：</p>
<ol>
<li><p>自己生成的对象自己持有。比如：NSObject * __strong object = [NSObject alloc] init];</p>
</li>
<li><p>非自己生成的对象，自己也能持有。比如：NSMutableArray * __strong array = [NSMutableArray array];</p>
</li>
<li><p>不再需要自己持有的对象时释放</p>
</li>
<li><p>非自己持有的对象自己无法释放</p>
</li>
</ol>
<p>具体可参见下表：</p>
<table>
<thead>
<tr>
<th>对象操作</th>
<th style="text-align:center">OC 中对应的方法</th>
<th style="text-align:center">对应的 retainCount 变化</th>
</tr>
</thead>
<tbody>
<tr>
<td>生成并持有对象</td>
<td style="text-align:center">alloc/new/copy/mutableCopy等</td>
<td style="text-align:center">+1</td>
</tr>
<tr>
<td>持有对象</td>
<td style="text-align:center">retain</td>
<td style="text-align:center">+1</td>
</tr>
<tr>
<td>释放对象</td>
<td style="text-align:center">release</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td>废弃对象</td>
<td style="text-align:center">dealloc</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
<p><strong>注意：</strong>这些有关 OC 内存管理的方法，实际上不包括在该语言中，而是包含再 Cocoa 框架中用于 OS X、iOS 应用开发。Cocoa 框架中 Foundation 框架类库的 NSObject 类担负内存管理的职责。Objective-C 内存管理中的 alloc/retain/release/dealloc 方法分别指代 NSObject 类的 alloc 类方法、retain 实例方法、release 实例方法和 dealloc 实例方法。</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-arc-05.jpeg" alt="">(<a href="http://www.ituring.com.cn/minibook/745" target="_blank" rel="external">图片来自</a>)</p>
<h3 id="alloc/retain/release/dealloc实现">alloc/retain/release/dealloc实现</h3><p>苹果的实现大概就是采用散列表（引用计数表）来管理引用计数，如下图所示：</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-arc-06.jpeg" alt="">(<a href="http://www.ituring.com.cn/minibook/745" target="_blank" rel="external">图片来自</a>)</p>
<p>通过引用计数表管理引用计数的好处如下：</p>
<ol>
<li>对用内存块的分配无需考虑内存块头部</li>
<li>引用计数表各记录中存有内存块地址，可从各个记录追溯到各对象的内存块</li>
</ol>
<p>这里特别要说的是，第二条这一特性在调试时有着举足轻重的作用。即使出现故障导致对象占用的内存块损坏，但只要引用计数表没有被破坏，就能够确认各内存块的位置，如下图所示：</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-arc-07.jpeg" alt="">(<a href="http://www.ituring.com.cn/minibook/745" target="_blank" rel="external">图片来自</a>)</p>
<p>另外，在利用工具检测内存泄漏时，引用计数表的各记录也有助于检测各对象的持有者是否存在。</p>
<hr>
<h2 id="ARC">ARC</h2><p>当当当~~~今天的主角登场啦！！！</p>
<p>实际上<strong>引用计数式内存管理</strong>的本质部分在 ARC 中并没有改变。就像<strong>自动引用计数</strong>这个名称表示的那样，ARC 只是自动地帮助我们处理<strong>引用计数</strong>的相关部分。</p>
<h3 id="所有权修饰符">所有权修饰符</h3><p>Objective-C 编程中为了处理对象，可将变量类型定义为 id 类型或各种对象类型。</p>
<p>所谓对象类型就是指向 NSObject 这样的 Objective-C 类的指针，例如 NSObject <em> 。id 类型用于隐藏对象类型的类名部分，相当于 C 语言中常用的 void </em> 。</p>
<p>ARC 有效时，id 类型和对象类型同 C 语言其他类型不同，其类型上必须附加所有权修饰符。所有权修饰符一共有 4 种：</p>
<ul>
<li><code>__strong</code></li>
<li><code>__weak</code></li>
<li><code>__unsafe_unretained</code></li>
<li><code>__autoreleasing</code></li>
</ul>
<p>说到变量所有权修饰符，有人可能会跟属性修饰符搞混，这里做一个对照关系小结：</p>
<ul>
<li><code>assign</code> 对应的所有权类型是 <code>__unsafe_unretained</code></li>
<li><code>copy</code> 对应的所有权类型是 <code>__strong</code></li>
<li><code>retain</code> 对应的所有权类型是 <code>__strong</code></li>
<li><code>strong</code> 对应的所有权类型是 <code>__strong</code></li>
<li><code>unsafe_unretained</code> 对应的所有权类型是 <code>__unsafe_unretained</code></li>
<li><code>weak</code> 对应的所有权类型是 <code>__weak</code></li>
</ul>
<p>以上除了 <code>weak</code> 外，其他的属性修饰符在 MRC 模式下也是有效的。</p>
<p>另外，<code>__strong</code>、<code>__weak</code>、<code>__autoreleasing</code> 修饰的自动变量会自动初始化为 nil。</p>
<h4 id="__strong_修饰符">__strong 修饰符</h4><p><code>__strong</code> 表示强引用，对应定义 property 时用到的 <code>strong</code>。当对象没有任何一个强引用指向它时，它才会被释放。如果在声明引用时不加修饰符，那么引用将默认是强引用。当需要释放强引用指向的对象时，需要保证所有指向对象强引用置为 nil。<code>__strong</code> 修饰符是 id 类型和对象类型默认的所有权修饰符。</p>
<h4 id="__weak_修饰符">__weak 修饰符</h4><p><code>__weak</code> 表示弱引用，对应定义 property 时用到的 <code>weak</code>。弱引用不会影响对象的释放，而当对象被释放时，所有指向它的弱引用都会自定被置为 nil，这样可以防止野指针。<code>__weak</code> 最常见的一个作用就是用来避免强引用循环。但是需要注意的是，<code>__weak</code> 修饰符只能用于 iOS 5 以上的版本，在 iOS 4 及更低的版本中使用 <code>__unsafe_unretained</code> 修饰符来代替。</p>
<h5 id="循环引用">循环引用</h5><p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-arc-02.001.jpeg" alt=""><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-arc-03.png" alt=""></p>
<h5 id="__weak_实现">__weak 实现</h5><p>关于 runtime 如何实现 weak 属性，可参见：<a href="https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01%E3%80%8A%E6%8B%9B%E8%81%98%E4%B8%80%E4%B8%AA%E9%9D%A0%E8%B0%B1%E7%9A%84iOS%E3%80%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88/%E3%80%8A%E6%8B%9B%E8%81%98%E4%B8%80%E4%B8%AA%E9%9D%A0%E8%B0%B1%E7%9A%84iOS%E3%80%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88%EF%BC%88%E4%B8%8A%EF%BC%89.md#8-runtime-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0-weak-%E5%B1%9E%E6%80%A7" target="_blank" rel="external">《招聘一个靠谱的 iOS》</a> 中的解答。</p>
<h4 id="__unsafe_unretained_修饰符">__unsafe_unretained 修饰符</h4><p>ARC 是在 iOS 5 引入的，而 <code>__unsafe_unretained</code> 这个修饰符主要是为了在 ARC 刚发布时兼容 iOS 4 以及版本更低的系统，因为这些版本没有弱引用机制。这个修饰符在定义 property 时对应的是  <code>unsafe_unretained</code>。<code>__unsafe_unretained</code> 修饰的指针纯粹只是指向对象，没有任何额外的操作，不会去持有对象使得对象的 retainCount + 1。而在指向的对象被释放时依然原原本本地指向原来的对象地址，不会被自动置为 nil，所以成为了野指针，非常不安全。</p>
<h4 id="__autoreleasing_修饰符">__autoreleasing 修饰符</h4><p>在 ARC 模式下，我们不能显示的使用 <code>autorelease</code> 方法了，但是 <code>autorelease</code> 的机制还是有效的，通过将对象赋给 <code>__autoreleasing</code> 修饰的变量就能达到在 MRC 模式下调用对象的 <code>autorelease</code> 方法同样的效果。</p>
<p>也就是说可以理解为，在 ARC 有效时，用 @autoreleasepool 块替代 NSAutoreleasePool 类，用附有 <code>__autoreleasing</code> 修饰符的变量替代 <code>autorelease</code> 方法，如图所示：</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-arc-04.001.png" alt=""></p>
<p>在 ARC 模式下，显式的使用 <code>__autoreleasing</code> 的场景很少见，但是 autorelease 的机制却依然在很多地方默默起着作用。我们来看看这些场景：</p>
<ol>
<li>方法返回值</li>
<li>访问 __weak 修饰的变量</li>
<li>id 的指针或对象的指针(id *)</li>
</ol>
<p>关于使用场景的具体讲解，感兴趣的同学可以自学搜索。</p>
<h5 id="Autorelease_Pool">Autorelease Pool</h5><p>在 ARC 下，我们并不需要手动调用 autorelease 有关的方法，甚至可以完全不知道 autorelease 的存在，就可以正确管理好内存。因为 Cocoa Touch 的 Runloop 中，每个 runloop circle 中系统都自动加入了 Autorelease Pool 的创建和释放。</p>
<p>Autorelase Pool 提供了一种可以允许你向一个对象延迟发送 <code>release</code> 消息的机制。当你想放弃一个对象的所有权，同时又不希望这个对象立即被释放掉（例如在一个方法中返回一个对象时），Autorelease Pool 的作用就显现出来了。</p>
<p>所谓的延迟发送 <code>release</code> 消息指的是，当我们把一个对象标记为 <code>autorelease</code> 时:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span>* str = [[[<span class="built_in">NSString</span> alloc] initWithString:<span class="string">@"hello"</span>] autorelease];</span><br></pre></td></tr></table></figure>
<p>这个对象的 retainCount 会 + 1，但是并不会发生 release。当这段语句所处的 autoreleasepool 进行 drain 操作时，所有标记了 <code>autorelease</code> 的对象的 retainCount 会被 - 1。即 <code>release</code> 消息的发送被延迟到 pool 释放的时候了。</p>
<p>在 ARC 环境下，苹果引入了 <code>@autoreleasepool</code> 语法，不再需要手动调用 <code>autorelease</code> 和 <code>drain</code> 等方法。</p>
<h3 id="规则">规则</h3><p>在 ARC 有效的情况下编译源代码，必须遵守一定的规则。下面就是具体的 ARC 的规则：</p>
<ol>
<li><p>不能显式使用 retain/release/retainCount/autorelease</p>
</li>
<li><p>不能使用 NSAllocateObject/NSDeallocateObject</p>
</li>
<li><p>需要遵守内存管理的方法命名规则。在 ARC 模式和 MRC 模式下，以 alloc/new/copy/mutableCopy 开头的方法在返回对象时都必须返回给调用方所应当持有的对象。在 ARC 模式下，追加一条：以 init 开头的方法必须是实例方法并且必须要返回对象。返回的对象应为 id 类型或声明该方法的类的对象类型，或是该类的超类型或子类型。该返回的对象并不注册到 Autorelease Pool 中，基本上只是对 alloc 方法返回值的对象进行初始化处理并返回该对象。需要注意的是：- (void)initialize; 方法虽然是以 init 开头但是并不包含在上述规则中</p>
</li>
<li><p>不要显式调用 dealloc</p>
</li>
<li><p>使用 @autoreleasepool 块替代 NSAutoreleasePool</p>
</li>
<li><p>不能使用区域（NSZone）</p>
</li>
<li><p>对象型变量不能作为 C 语言结构体（struct/union）的成员</p>
</li>
<li><p>显式转换 id 和 void *</p>
</li>
</ol>
<h3 id="Toll-Free_Bridge">Toll-Free Bridge</h3><blockquote>
<p>There are a number of data types in the Core Foundation framework and the Foundation framework that can be used interchangeably. This capability, called toll-free bridging, means that you can use the same data type as the parameter to a Core Foundation function call or as the receiver of an Objective-C message. For example, NSLocale (see NSLocale Class Reference) is interchangeable with its Core Foundation counterpart, CFLocale (see CFLocale Reference). Therefore, in a method where you see an NSLocale * parameter, you can pass a CFLocaleRef, and in a function where you see a CFLocaleRef parameter, you can pass an NSLocale instance. You cast one type to the other to suppress compiler warnings, as illustrated in the following example.</p>
</blockquote>
<p>Toll-Free Briding 保证了在程序中，可以方便和谐的使用 Core Foundation 类型的对象和 Objective-C 类型的对象。</p>
<p>在 MRC 时代，由于 Objective-C 类型的对象和 Core Foundation 类型的对象都是相同的 release 和 retain 操作规则，所以 Toll-Free Bridging 的使用比较简单，但是自从切换到 ARC 后，Objective-C 类型的对象内存管理规则改变了，而 Core Foundation 依然是之前的机制，换句话说，Core Foundation 不支持 ARC。</p>
<p>这个时候就必须要要考虑一个问题了，在做 Core Foundation 与 Objective-C 类型转换的时候，用哪一种规则来管理对象的内存。显然，对于同一个对象，我们不能够同时用两种规则来管理，所以这里就必须要确定一件事情：哪些对象用 Objective-C（也就是 ARC）的规则，哪些对象用 Core Foundation 的规则（也就是 MRC）的规则。或者说要确定对象类型转换了之后，内存管理的 ownership 的改变。于是苹果在引入 ARC 之后对 Toll-Free Bridging 的操作也加入了对应的方法与修饰符，用来指明用哪种规则管理内存，或者说是内存管理权的归属。这些方法和修饰符分别是：</p>
<ul>
<li>__bridge（修饰符）</li>
<li>__bridge_retained（修饰符） or CFBridgingRetain（函数）</li>
<li>__bridge_transfer（修饰符） or CFBridgingRelease（函数）</li>
</ul>
<p>本文关于 Toll-Free Bridge 不做过多介绍，感兴趣的同学可以参见：<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/Toll-FreeBridgin/Toll-FreeBridgin.html" target="_blank" rel="external">Toll-Free Bridge</a></p>
<hr>
<h2 id="要点">要点</h2><ol>
<li><p>ARC 是编译器提供的机制，而不是 GC (Garbage Collection) 这种运行时提供的机制</p>
</li>
<li><p>autorelease 实例方法的本质就是调用 NSAutoreleasePool 对象的 addObject 类方法</p>
</li>
</ol>
<hr>
<h2 id="参考">参考</h2><ul>
<li><a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html" target="_blank" rel="external">Objective-C Automatic Reference Counting (ARC)</a></li>
<li><a href="https://developer.apple.com/library/ios/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html" target="_blank" rel="external">Transitioning to ARC Release Notes</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011-SW1" target="_blank" rel="external">Advanced Memory Management Programming Guide</a></li>
<li><a href="http://www.samirchen.com/ios-arc/" target="_blank" rel="external">iOS ARC 内存管理要点</a></li>
<li><a href="https://hit-alibaba.github.io/interview/iOS/ObjC-Basic/MM.html" target="_blank" rel="external">Objective-C 中的内存分配</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>本文作为《Objective-C 高级编程》读书笔记的第一篇，给大家带来的是关于 ARC（Automatic Reference Counting）自动引用计数的知识点总结。</p>]]>
    
    </summary>
    
      <category term="ARC" scheme="http://itangqi.me/tags/ARC/"/>
    
      <category term="Notes" scheme="http://itangqi.me/tags/Notes/"/>
    
      <category term="iOS" scheme="http://itangqi.me/tags/iOS/"/>
    
      <category term="iOS" scheme="http://itangqi.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[聊一聊 UITableView（三）]]></title>
    <link href="http://itangqi.me/2016/02/27/the-notes-of-learning-of-uitableview-three/"/>
    <id>http://itangqi.me/2016/02/27/the-notes-of-learning-of-uitableview-three/</id>
    <published>2016-02-26T16:00:00.000Z</published>
    <updated>2016-04-06T10:57:31.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><blockquote>
<p>在本系列文章中，我将和大家聊一聊关于 UITableView 的种种，那些你知道的或者不知道的事。</p>
</blockquote>
<p>本文是系列文章《聊一聊 UITableView》的完结篇。</p>
<a id="more"></a> 
<p>第一篇：<a href="http://itangqi.me/2016/02/25/the-notes-of-learning-of-uitableview-one/">聊一聊 UITableView（一）</a><br>第二篇：<a href="http://itangqi.me/2016/02/26/the-notes-of-learning-of-uitableview-two/">聊一聊 UITableView（二）</a></p>
<hr>
<h2 id="实现">实现</h2><p>如果你有仔细阅读过本系列文章的前两篇（没看过的一定要去看看呀！），那么我想你基本上已经对实现的原理及流程有了清晰的认识。所以关于具体的实现，本文不做详细介绍，你可以参见下面两篇文章：</p>
<ul>
<li><a href="http://www.wugaojun.com/blog/2015/05/24/autolayoutshi-zhan-cellgao-du-bu-gu-ding-de-uitableview/" target="_blank" rel="external">AutoLayout实战:cell高度不固定的UITableView</a></li>
<li><a href="http://tutuge.me/2015/08/08/autolayout-example-with-masonry2/" target="_blank" rel="external">有趣的Autolayout示例2-Masonry实现</a></li>
</ul>
<hr>
<h2 id="那些坑">那些坑</h2><p>下面列举了几个在开发中比较常见的<strong>坑</strong>供大家学习：</p>
<h4 id="1-_UILabel_的_preferredMaxLayoutWidth">1. UILabel 的 <code>preferredMaxLayoutWidth</code></h4><p>定义如下:</p>
<blockquote>
<p>This property affects the size of the label when layout constraints are applied to it. During layout, if the text extends beyond the width specified by this property, the additional text is flowed to one or more new lines, thereby increasing the height of the label.</p>
</blockquote>
<p>如果我们要使用 Auto Layout 自动计算<strong>多行</strong> UILabel 的高度，这个属性就必须在运行时指定，要不然系统计算不出 UILabel 的宽度。这是因为 UILabel 需要知道 superview 的宽度才能<strong>折行</strong>，而 superview 的宽度还依仗着子 view 宽度的累加才能确定。</p>
<p>同时需要设置 UILabel 的 <code>numberOfLines</code> 属性为 0 以表示显示多行。</p>
<h4 id="2-_UITableView_的_estimatedRowHeight">2. UITableView 的 <code>estimatedRowHeight</code></h4><blockquote>
<p>我们知道，UITableView 是个 UIScrollView，就像平时使用 UIScrollView 一样，加载时指定 contentSize 后它才能根据自己的 bounds、contentInset、contentOffset 等属性共同决定是否可以滑动以及滚动条的长度。而 UITableView 在一开始并不知道自己会被填充多少内容，于是询问 data source 个数和创建 cell，同时询问 delegate 这些 cell 应该显示的高度，这就造成它在加载的时候浪费了多余的计算在屏幕外边的 cell 上。</p>
</blockquote>
<p>1.设置估算高度后，contentSize.height 根据“cell 估算值 x cell 个数”计算，这就导致滚动条的大小处于不稳定的状态，contentSize 会随着滚动从估算高度慢慢替换成真实高度，肉眼可见滚动条突然变化甚至“跳跃”。</p>
<p>2.若是有设计不好的下拉刷新或上拉加载控件，或是 KVO 了 contentSize 或 contentOffset 属性，有可能使表格滑动时跳动。</p>
<p>3.估算高度设计初衷是好的，让加载速度更快，那凭啥要去侵害滑动的流畅性呢，用户可能对进入页面时多零点几秒加载时间感觉不大，但是滑动时实时计算高度带来的卡顿是明显能体验到的，个人觉得还不如一开始都算好了呢（iOS8 更过分，即使都算好了也会边划边计算）</p>
<h4 id="3-_UITableView_的_heightForRowAtIndexPath:">3. UITableView 的 <code>heightForRowAtIndexPath:</code></h4><p>对于 Auto Layout 下的 cell，使用 <code>systemLayoutSizeFittingSize:</code> 计算 tableview.contentView 的 <code>UILayoutFittingCompressedSize</code> 返回的 CGSize 的高度是首选，但它同样是根据 <code>intrinsicContentSize</code> 来计算的，得出的高度其实是不包含 <code>UITextView</code> 这种 view 的，所以结果还需要<strong>加上</strong> UITextView 的高度即可。</p>
<h4 id="4-_iOS_8_算高机制">4. iOS 8 算高机制</h4><p>相同的代码在 iOS 7 和 iOS 8 上滑动顺畅程度完全不同，iOS8 莫名奇妙的卡。很大一部分原因是 iOS 8 上的算高机制大不相同，图片来自 <a href="http://blog.sunnyxx.com/2015/05/17/cell-height-calculation/" target="_blank" rel="external">sunnyxx</a>：</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-uitableview-three-01.jpg" alt=""></p>
<p>造成这样的原因：<br>1.不开启高度估算时，UITableView 上来就要对所有 cell 调用算高来确定 contentSize<br>2.<code>dequeueReusableCellWithIdentifier:forIndexPath:</code> 相比不带 “forIndexPath” 的版本会多调用一次高度计算<br>3.iOS 7 计算高度后有”缓存“机制，不会重复计算；而 iOS 8 不论何时都会重新计算 cell 高度（cell 被认为随时都可能改变高度（如从设置中调整动态字体大小），所以每次滑动出来后都要重新计算高度。）</p>
<hr>
<h2 id="那些优化">那些优化</h2><h4 id="1-_避免_cell_的重新布局">1. 避免 cell 的重新布局</h4><p>cell 的布局填充等操作比较耗时，一般可在创建时就布局好。如自定义 cell, 可重写其 <code>initWithStyle:</code> 方法，在其中将 cell 的布局设置完成。<br>创建 cell 完成之后，调用 <strong>相应方法</strong> 往其中填充内容即可，即将 cell 的布局及填充分开执行，且尽量将要填充的 data 提前准备好。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 UITableView 的 dequeueReusableCellWithIdentifier 方法时会通过这个方法初始化 Cell</span></span><br><span class="line">- (instancetype)initWithStyle:(<span class="built_in">UITableViewCellStyle</span>)style reuseIdentifier:(<span class="built_in">NSString</span> *)reuseIdentifier &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithStyle:style reuseIdentifier:reuseIdentifier];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">    	<span class="comment">// 在这里！！！</span></span><br><span class="line">     	[<span class="keyword">self</span> initView];</span><br><span class="line">        [<span class="keyword">self</span> updateConstraints];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-_在_Model（Entity）中计算并保存_Cell_的高度">2. 在 Model（Entity）中计算并保存 Cell 的高度</h4><p>我们都知道，UITableView 是继承自 UIScrollView 的，需要先确定它的 contentSize 及每个 cell 的位置，然后才会把重用的 cell 放置到对应的位置。所以事实上，UITableView 的回调顺序是先多次调用 <code>tableView:heightForRowAtIndexPath:</code>以确定 contentSize 及 cell 的位置，然后才会调用 <code>tableView:cellForRowAtIndexPath:</code>，从而来显示在当前屏幕的 cell。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DataEntity</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原始数据</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *content;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *title;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cell 高度</span></span><br><span class="line">@roperty(<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> cellHeight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>这样，就不用在 <code>tableView:heightForRowAtIndexPath:</code> 中每次都计算了。</p>
<p>补充：同理可将 view 缓存起来的：比如每一个 cell 都需要用到的 UIImage, UIFont, NSDateFormatter 或者任何在绘制时需要的对象，推荐使用类层级的初始化方法中执行分配，并将其存储为静态变量。</p>
<h4 id="3-_滑动_UITableView_时，按需加载对应的内容">3. 滑动 UITableView 时，按需加载对应的内容</h4><p>从 UIScrollView 的角度出发，对 cell 进行按需加载, 即滚动很快时候, 只加载目标范围内的 cell.</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (needLoadArr<span class="variable">.count</span>&gt;<span class="number">0</span> &amp;&amp; [needLoadArr indexOfObject:indexPath]==<span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">    [cell clear]; <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如：如果目标行与当前行相差超过指定行数，只在目标滚动范围的前后指定 3 行加载。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)scrollViewWillEndDragging:(<span class="built_in">UIScrollView</span> *)scrollView withVelocity:(<span class="built_in">CGPoint</span>)velocity targetContentOffset:(<span class="keyword">inout</span> <span class="built_in">CGPoint</span> *)targetContentOffset&#123;</span><br><span class="line">    <span class="built_in">NSIndexPath</span> *ip = [<span class="keyword">self</span> indexPathForRowAtPoint:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, targetContentOffset-&gt;y)];</span><br><span class="line">    <span class="built_in">NSIndexPath</span> *cip = [[<span class="keyword">self</span> indexPathsForVisibleRows] firstObject];</span><br><span class="line">    <span class="built_in">NSInteger</span> skipCount = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">if</span> (labs(cip<span class="variable">.row</span>-ip<span class="variable">.row</span>)&gt;skipCount) &#123;</span><br><span class="line">        <span class="built_in">NSArray</span> *temp = [<span class="keyword">self</span> indexPathsForRowsInRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, targetContentOffset-&gt;y, <span class="keyword">self</span><span class="variable">.width</span>, <span class="keyword">self</span><span class="variable">.height</span>)];</span><br><span class="line">        <span class="built_in">NSMutableArray</span> *arr = [<span class="built_in">NSMutableArray</span> arrayWithArray:temp];</span><br><span class="line">        <span class="keyword">if</span> (velocity<span class="variable">.y</span>&lt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">NSIndexPath</span> *indexPath = [temp lastObject];</span><br><span class="line">            <span class="keyword">if</span> (indexPath<span class="variable">.row</span>+<span class="number">33</span>) &#123;</span><br><span class="line">                [arr addObject:[<span class="built_in">NSIndexPath</span> indexPathForRow:indexPath<span class="variable">.row</span>-<span class="number">3</span> inSection:<span class="number">0</span>]];</span><br><span class="line">                [arr addObject:[<span class="built_in">NSIndexPath</span> indexPathForRow:indexPath<span class="variable">.row</span>-<span class="number">2</span> inSection:<span class="number">0</span>]];</span><br><span class="line">                [arr addObject:[<span class="built_in">NSIndexPath</span> indexPathForRow:indexPath<span class="variable">.row</span>-<span class="number">1</span> inSection:<span class="number">0</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        [needLoadArr addObjectsFromArray:arr];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-_复用高开销的对象">4. 复用高开销的对象</h4><p>在 Objective-C 中有些对象的初始化过程很缓慢，比如：<code>NSDateFormatter</code> 和 <code>NSCalendar</code>，但是有些时候，你也不得不使用它们。为了这样的高开销的对象成为影响程序性能的重要因素，我们可以复用它们。</p>
<p>比如，我们在一个类里添加一个 <code>NSDateFormatter</code> 的对象，并使用懒加载机制来使用它，整个类只用到一个这样的对象，并只初始化一次：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in your .h or inside a class extension</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSDateFormatter</span> *dateFormatter;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// inside the implementation (.m)</span></span><br><span class="line"><span class="comment">// When you need, just use self.dateFormatter</span></span><br><span class="line">- (<span class="built_in">NSDateFormatter</span> *)dateFormatter &#123;</span><br><span class="line">    <span class="keyword">if</span> (! _dateFormatter) &#123;</span><br><span class="line">        _dateFormatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">        [_dateFormatter setDateFormat:<span class="string">@"yyyy-MM-dd a HH:mm:ss EEEE"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _dateFormatter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是上面的代码在多线程环境下会有问题，所以我们可以改进如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// no property is required anymore. The following code goes inside the implementation (.m)</span></span><br><span class="line">- (<span class="built_in">NSDateFormatter</span> *)dateFormatter &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSDateFormatter</span> *dateFormatter;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        dateFormatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">        [dateFormatter setDateFormat:<span class="string">@"yyyy-MM-dd a HH:mm:ss EEEE"</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> dateFormatter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就线程安全了。</p>
<h4 id="5-_尽量减少不必要的透明_View">5. 尽量减少不必要的透明 View</h4><p>透明图层对渲染性能会有一定的影响，系统必须将透明图层与下面的视图混合起来计算颜色，并绘制出来。减少透明图层并使用不透明的图层来替代它们，可以极大地提高渲染速度。</p>
<h4 id="6-_优化touch事件传递">6. 优化touch事件传递</h4><p>把不需要接受 touch 的 view 的 <code>userInteractionEnabled</code> 设为 0 </p>
<h4 id="7-_其他">7. 其他</h4><ul>
<li>选择合适的数据结构来承载数据，不同的数据结构对不同操作的开销是存在差异的；</li>
<li>如果 Cell 展示的内容来自网络，确保用异步加载的方式来获取数据，并且进行缓存，滚出可视范围的载入进程要 Cancel 掉；</li>
<li>尽量减少 subview 的数量，减少渲染工作；</li>
<li>异步获取数据：</li>
<li>启用 GZIP 数据压缩；</li>
</ul>
<hr>
<h2 id="写在最后">写在最后</h2><blockquote>
<p>纸上谈兵终觉浅 绝知此事要躬行</p>
</blockquote>
<p>好啦，不管怎样，亲自去实践才是获取与巩固知识的最佳办法！</p>
<h2 id="参考">参考</h2><ul>
<li><a href="http://blog.sunnyxx.com/2015/05/17/cell-height-calculation/" target="_blank" rel="external">优化UITableViewCell高度计算的那些事</a></li>
<li><a href="http://blog.alchemistxxd.com/2015/12/05/Auto-Layout-dynamic-UITableViewCell/" target="_blank" rel="external">使用 Auto Layout 处理动态高度的 UITableViewCell 方法的归纳与心得 ⭕️</a></li>
<li><a href="http://tutuge.me/2015/02/19/%E6%8F%90%E5%8D%87UITableView%E6%80%A7%E8%83%BD-%E5%A4%8D%E6%9D%82%E9%A1%B5%E9%9D%A2%E7%9A%84%E4%BC%98%E5%8C%96/" target="_blank" rel="external">提升UITableView性能-复杂页面的优化</a></li>
<li><a href="http://www.samirchen.com/ios-performance-optimization/" target="_blank" rel="external">iOS 程序性能优化</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><blockquote>
<p>在本系列文章中，我将和大家聊一聊关于 UITableView 的种种，那些你知道的或者不知道的事。</p>
</blockquote>
<p>本文是系列文章《聊一聊 UITableView》的完结篇。</p>]]>
    
    </summary>
    
      <category term="Notes" scheme="http://itangqi.me/tags/Notes/"/>
    
      <category term="UITableView" scheme="http://itangqi.me/tags/UITableView/"/>
    
      <category term="UITableViewCell" scheme="http://itangqi.me/tags/UITableViewCell/"/>
    
      <category term="iOS" scheme="http://itangqi.me/tags/iOS/"/>
    
      <category term="iOS" scheme="http://itangqi.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[聊一聊 UITableView（二）]]></title>
    <link href="http://itangqi.me/2016/02/26/the-notes-of-learning-of-uitableview-two/"/>
    <id>http://itangqi.me/2016/02/26/the-notes-of-learning-of-uitableview-two/</id>
    <published>2016-02-25T16:00:00.000Z</published>
    <updated>2016-03-07T05:58:27.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><blockquote>
<p>在本系列文章中，我将和大家聊一聊关于 UITableView 的种种，那些你知道的或者不知道的事。</p>
</blockquote>
<p>本文是系列文章《聊一聊 UITableView》的第二篇。</p>
<a id="more"></a> 
<p>第一篇：<a href="http://itangqi.me/2016/02/25/the-notes-of-learning-of-uitableview-one/">聊一聊 UITableView（一）</a></p>
<hr>
<h2 id="相关知识储备">相关知识储备</h2><h3 id="estimatedHeightForRowAtIndexPath:"><code>estimatedHeightForRowAtIndexPath:</code></h3><p>首先，丢张官方文档截图：</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-uitableviewcell-two-02.png" alt=""></p>
<p>在 iOS 7 上， 苹果为 <code>UITableViewDelegate</code> 带来了新方法 <code>estimatedHeightForRowAtIndexPath:</code>。此方法用于返回一个 cell 的预估高度，如果在程序中实现了这个方法，tableview 首次加载的时候就不会调用 <code>heightForRowAtIndexPath:</code> 方法，而是用 <code>estimatedHeightForRowAtIndexPath:</code> 返回的预估高度计算 tableview 的总高度，然后 tableview 就可以显示出来了，等到 cell 可见的时候，再去调用 <code>heightForRowAtIndexPath:</code> 获取 cell 的实际高度。</p>
<p>注意：除非行高极端变化并且你已经明显的觉察到了滚动时滚动条的“跳跃”现象，你才需要实现此方法；否则，直接用 tableView 的 estimatedRowHeight 属性即可。</p>
<p>而在 iOS 8 上，苹果为 UITableView 带来了 <a href="https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/AutolayoutPG/WorkingwithSelf-SizingTableViewCells.html" target="_blank" rel="external">Self-Sizing</a> </p>
<p>首先，进行行高预估：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tableView<span class="variable">.rowHeight</span> = <span class="built_in">UITableViewAutomaticDimension</span>;</span><br><span class="line">tableView<span class="variable">.estimatedRowHeight</span> = <span class="number">85.0</span>;</span><br></pre></td></tr></table></figure></p>
<p>其次，在 <code>heightForRowAtIndexPath:</code> 中返回 UITableViewAutomaticDimension 即可：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#ifdef IOS_8_NEW_FEATURE_SELF_SIZING</span></span><br><span class="line">    <span class="comment">// iOS 8 的 Self-sizing 特性</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UITableViewAutomaticDimension</span>;</span><br><span class="line"><span class="preprocessor">#else</span></span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>你没看错，就这么简单。好啦，你可以愉快的去玩耍了。</p>
<h3 id="systemLayoutSizeFittingSize:"><code>systemLayoutSizeFittingSize:</code></h3><p>没错，还是官方文档截图：</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-uitableviewcell-two-01.png" alt=""></p>
<p>如果要适配 iOS 8 以下，则要使用到 <code>stemLayoutSizeFittingSize:</code> 方法。 由于其需要 cell 的一个实例才能计算，所以这儿用字典专门存放 cell 的实列，这样就不需要每次计算 cell 高度的时候去动态生成实例，这样即方便也高效也少用内存，可谓一举三得。</p>
<p>首先，试图从字典中取出指定 cell:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// offscreenCells 为成员变量</span></span><br><span class="line">NoteListCell *_templateCell = [<span class="keyword">self</span><span class="variable">.offscreenCells</span> objectForKey:reuseIdentifier];</span><br></pre></td></tr></table></figure></p>
<p>如果为空，创建并存入字典：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!_templateCell) &#123;</span><br><span class="line">    _templateCell = [[NoteListCell alloc] init];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.offscreenCells</span> setObject:_templateCell forKey:reuseIdentifier];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后，计算 cell 的实际高度：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 填充数据</span></span><br><span class="line">[_templateCell updateWithNote:note];</span><br><span class="line"><span class="comment">// 根据当前数据，计算 Cell 的高度，注意 +1</span></span><br><span class="line">note<span class="variable">.cellHeight</span> = [_templateCell<span class="variable">.contentView</span></span><br><span class="line"><span class="comment">// 使用 `UILayoutFittingCompressedSize` 参数可以得到适合 cell 中所有内容所需的最小尺寸  </span></span><br><span class="line">systemLayoutSizeFittingSize:<span class="built_in">UILayoutFittingCompressedSize</span>]<span class="variable">.height</span> + <span class="number">1.0</span>f;</span><br></pre></td></tr></table></figure></p>
<p>注意：由于是在 _templateCell.contentView 上调用这个方法，那么返回的值将是 contentView 的高度，UITableViewCell 的高度要比它的 contentView 要高 1, 也就是它的分隔线的高度。</p>
<h3 id="setNeedsLayout_vs-_setNeedsUpdateConstraints_and_layoutIfNeeded_vs_updateConstraintsIfNeeded"><code>setNeedsLayout</code> vs. <code>setNeedsUpdateConstraints</code> and <code>layoutIfNeeded</code> vs <code>updateConstraintsIfNeeded</code></h3><p>参见 <a href="http://stackoverflow.com/questions/20609206/setneedslayout-vs-setneedsupdateconstraints-and-layoutifneeded-vs-updateconstra" target="_blank" rel="external">stackoverflow</a> 上相关问题的解答：</p>
<ol>
<li>如果仅想要立即改变约束，调用 <code>setNeedsLayout</code>;</li>
<li>如果改变 view 的一些属性（如 offsets）可能会导致布局的改变，那么调用 <code>setNeedsUpdateConstraints</code>, 更多的时候后面需要加 <code>setNeedsLayout</code>;</li>
<li>如果想要立即改变布局，如会形成新的 frame, 那么需要在调用 <code>layoutIfNeeded</code>;</li>
</ol>
<h3 id="缓存行高">缓存行高</h3><p>如果上面提到的你都做了，但是 <code>tableView:heightForRowAtIndexPath:</code> 的性能仍然慢的不可接受。非常不幸，你需要给行高做一些缓存（这是苹果的工程师们给出的改进建议）。大体的思路是，第一次计算时让自动布局引擎解析约束条件，然后将计算出的行高缓存起来，以后所有对该cell 的高度的请求都返回缓存值。当然，关键还要确保任何会导致 cell 高度变化的情况发生时你都清除了缓存的行高——这通常发生在 cell 的内容变化时或其他重大事件发生时（比如用户调节了动态类型文本大小(Dynamic Type text size)的滑动条）。</p>
<p>未完待续……</p>
<hr>
<h2 id="参考">参考</h2><ul>
<li><a href="http://www.ifun.cc/blog/2014/02/21/dong-tai-ji-suan-uitableviewcellgao-du-xiang-jie/" target="_blank" rel="external">动态计算UITableViewCell高度详解</a></li>
<li><a href="http://codingobjc.com/blog/2014/10/15/shi-yong-autolayoutshi-xian-uitableviewde-celldong-tai-bu-ju-he-ke-bian-xing-gao/" target="_blank" rel="external">使用Autolayout实现UITableView的Cell动态布局和高度动态改变</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><blockquote>
<p>在本系列文章中，我将和大家聊一聊关于 UITableView 的种种，那些你知道的或者不知道的事。</p>
</blockquote>
<p>本文是系列文章《聊一聊 UITableView》的第二篇。</p>]]>
    
    </summary>
    
      <category term="Notes" scheme="http://itangqi.me/tags/Notes/"/>
    
      <category term="UITableView" scheme="http://itangqi.me/tags/UITableView/"/>
    
      <category term="UITableViewCell" scheme="http://itangqi.me/tags/UITableViewCell/"/>
    
      <category term="iOS" scheme="http://itangqi.me/tags/iOS/"/>
    
      <category term="iOS" scheme="http://itangqi.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[聊一聊 UITableView（一）]]></title>
    <link href="http://itangqi.me/2016/02/25/the-notes-of-learning-of-uitableview-one/"/>
    <id>http://itangqi.me/2016/02/25/the-notes-of-learning-of-uitableview-one/</id>
    <published>2016-02-24T16:00:00.000Z</published>
    <updated>2016-03-07T05:42:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><blockquote>
<p>在本系列文章中，我将和大家聊一聊关于 UITableView 的种种，那些你知道的或者不知道的事。</p>
</blockquote>
<p>前几天正好看了关于 AutoLayout 与 UITableViewCell 高度动态计算的文章，于是便在 <a href="https://github.com/tangqi92/SuperNote" target="_blank" rel="external">SuperNote</a> 上践行了所学的知识，并做了相关笔记的总结，在此与大家进行分享。</p>
<a id="more"></a> 
<hr>
<h2 id="Auto_Layout">Auto Layout</h2><p>首先看官方文档<a href="https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/AutolayoutPG/" target="_blank" rel="external">《Auto Layout Guide》</a>中关于 Auto Layout 的描述：</p>
<blockquote>
<p>Auto Layout dynamically calculates the size and position of all the views in your view hierarchy, based on constraints placed on those views. For example, you can constrain a button so that it is horizontally centered with an Image view and so that the button’s top edge always remains 8 points below the image’s bottom. If the image view’s size or position changes, the button’s position automatically adjusts to match.</p>
<p>This constraint-based approach to design allows you to build user interfaces that dynamically respond to both internal and external changes.</p>
</blockquote>
<p>作为从 Android 阵营转过来的我，一路都是手撕页面布局的，当我面对要在 Storyboard 中拖拽各种约束时，我的内心是几乎是崩溃的（也许我该尝试下），直到我发现了 <a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry</a>，妈妈再也不用担心我写 Auto Layout 了。</p>
<p>Masonry 老少皆宜，非常容易上手，具体的使用可参见<strong>里脊串</strong>的文章：</p>
<ul>
<li><a href="http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/" target="_blank" rel="external">Masonry介绍与使用实践(快速上手Autolayout)</a></li>
</ul>
<hr>
<h2 id="UITableViewCell_重用机制">UITableViewCell 重用机制</h2><p>在讲 UITableViewCell 高度自适应前，首先简单介绍下 UITableViewCell 的重用机制：</p>
<ul>
<li><p>当用户滚动 UITableView 对象时，部分 UITableViewCell 对象会移出窗口。此时 UITableView 对象会将移出窗口的 UITableViewCell 对象放入 UITableViewCell <strong>对象池</strong>，等待重新利用。当 UITableView 对象要求数据源返回某个 UITableViewCell 对象时，数据源可以先查看对象池。如果有未使用的 UITableViewCell 对象，就可以用<strong>新的数据</strong>配置这个 UITableViewCell 对象，然后将其返回给 UITableView 对象，从而避免创建新对象。</p>
</li>
<li><p>这里还有一个问题：因为有时需要创建 UITableViewCell 的<strong>子类</strong>，用于实现特定的外观或特性，所以 UITableView 对象可能会拥有<strong>不同类型</strong>的 UITableViewCell 对象。如果 UITableViewCell 对象池中的对象创建自不同的子类，那么 UITableView 对象就有可能得到错误类型的 UITableViewCell 对象。鉴于上述原因，必须确保 UITableView 对象能够得到指定类型的 UITableViewCell 对象，这样才能确定返回的对象会拥有哪些属性和方法。</p>
</li>
<li><p>从 UITableViewCell 对象池获取对象时，无须关心取回的是否是某个特定的对象，因为无论取回的是哪个对象，都要重新设置数据。真正要关心的是取回的对象是否是某个<strong>特定</strong>的类型。每个 UITableViewCell 对象都有一个类型为 NSString 的 <strong>reuseIdentifier</strong> 属性。当数据源向 UITableView 对象获取可重用的 UITableViewCell 对象时，可传入一个字符串并要求 UITableView 对象返回相应的 UITableViewCell 对象，这些 UITableViewCell 对象的 reuseIdentifier 属性必须和传入的字符串相同。按照约定，应该将 UITableViewCell 或者 UITableViewCell 子类的类名用作 reuseIdentifier。</p>
</li>
</ul>
<p>上面讲得那么啰嗦，不如直接看下面的图： </p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-of-uitableviewcell-01.png" alt=""></p>
<p>情况 A: 所有 Cell 具有相同的类型</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> *  实现数据绑定</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="comment">// 根据标识符 identifier 从重用队列中取出一个 cell</span></span><br><span class="line">    NoteListCell *cell = [tableView dequeueReusableCellWithIdentifier:kCellReuseIdentifier];</span><br><span class="line">    <span class="comment">// 由于一开始重用队列是空的，所以取出的 cell 也是空的，if(!cell) 条件成立，就会去执行 &#123;&#125; 内的代码</span></span><br><span class="line">    <span class="keyword">if</span> (!cell) &#123;</span><br><span class="line">    	<span class="comment">// 创建 UITableViewCellStyleDefault类型的 cell，并将其标识为 identifier（@”cell”），这样一个 cell 就创建完成了</span></span><br><span class="line">        cell = [[NoteListCell alloc] initWithStyle:<span class="built_in">UITableViewCellStyleDefault</span> reuseIdentifier:kCellReuseIdentifier];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 绑定指定数据</span></span><br><span class="line">    VNNote *note = [<span class="keyword">self</span><span class="variable">.dataSource</span> objectAtIndex:indexPath<span class="variable">.row</span>];</span><br><span class="line">    note<span class="variable">.index</span> = indexPath<span class="variable">.row</span>;</span><br><span class="line">    [cell updateWithNote:note];</span><br><span class="line">    <span class="comment">// Make sure the constraints have been added to this cell, since it may have just been created from scratch</span></span><br><span class="line">    [cell setNeedsUpdateConstraints];</span><br><span class="line">    [cell updateConstraintsIfNeeded];</span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>情况 B: 具有多种类型的 Cell</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *cellIdentifier;</span><br><span class="line">    <span class="built_in">UITableViewCellStyle</span> cellStyle;</span><br><span class="line">    <span class="keyword">switch</span> ((indexPath<span class="variable">.row</span> + <span class="number">1</span>)%<span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">            <span class="comment">//有标题和副标题，可选图片</span></span><br><span class="line">            cellIdentifier = <span class="string">@"Subtitle Style"</span>;</span><br><span class="line">            cellStyle = <span class="built_in">UITableViewCellStyleSubtitle</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">            <span class="comment">//左边文字左对齐，右边文字右对齐，可选的图片</span></span><br><span class="line">            cellIdentifier = <span class="string">@"Value1 Style"</span>;</span><br><span class="line">            cellStyle = <span class="built_in">UITableViewCellStyleValue1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">            <span class="comment">//左边文字右对齐，蓝色字体。右边文字左对齐，黑色。没有图片</span></span><br><span class="line">            cellIdentifier = <span class="string">@"Value2 Style"</span>;</span><br><span class="line">            cellStyle = <span class="built_in">UITableViewCellStyleValue2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:&#123;</span><br><span class="line">            <span class="comment">//有标题，没有副标题，可选的图片</span></span><br><span class="line">            cellIdentifier = <span class="string">@"Default Style"</span>;</span><br><span class="line">            cellStyle = <span class="built_in">UITableViewCellStyleDefault</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSInteger</span> times = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">UITableViewCell</span> *myCell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];</span><br><span class="line">    <span class="keyword">if</span> (!myCell) &#123;</span><br><span class="line">        myCell = [[<span class="built_in">UITableViewCell</span> alloc] initWithStyle:cellStyle reuseIdentifier:cellIdentifier];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"创建%d次"</span>,++times);</span><br><span class="line">    &#125;</span><br><span class="line">    myCell<span class="variable">.textLabel</span><span class="variable">.text</span> = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"第%d行%@"</span>,indexPath<span class="variable">.row</span>+<span class="number">1</span>, cellIdentifier];</span><br><span class="line">    myCell<span class="variable">.detailTextLabel</span><span class="variable">.text</span> = <span class="string">@"Subtitle Text"</span>;</span><br><span class="line">    <span class="keyword">if</span> (indexPath<span class="variable">.row</span> &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        myCell<span class="variable">.imageView</span><span class="variable">.image</span> = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"smile.png"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> myCell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>未完待续……</p>
<hr>
<h2 id="参考">参考</h2><ul>
<li><a href="http://sharonhu1990.github.io/2015/10/28/%E6%B5%85%E6%9E%90UITableViewCell%E9%87%8D%E7%94%A8%E6%9C%BA%E5%88%B6/" target="_blank" rel="external">浅析UITableViewCell重用机制</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><blockquote>
<p>在本系列文章中，我将和大家聊一聊关于 UITableView 的种种，那些你知道的或者不知道的事。</p>
</blockquote>
<p>前几天正好看了关于 AutoLayout 与 UITableViewCell 高度动态计算的文章，于是便在 <a href="https://github.com/tangqi92/SuperNote">SuperNote</a> 上践行了所学的知识，并做了相关笔记的总结，在此与大家进行分享。</p>]]>
    
    </summary>
    
      <category term="Notes" scheme="http://itangqi.me/tags/Notes/"/>
    
      <category term="UITableView" scheme="http://itangqi.me/tags/UITableView/"/>
    
      <category term="UITableViewCell" scheme="http://itangqi.me/tags/UITableViewCell/"/>
    
      <category term="iOS" scheme="http://itangqi.me/tags/iOS/"/>
    
      <category term="iOS" scheme="http://itangqi.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Text Kit 学习笔记]]></title>
    <link href="http://itangqi.me/2016/02/18/the-notes-of-learning-text-kit/"/>
    <id>http://itangqi.me/2016/02/18/the-notes-of-learning-text-kit/</id>
    <published>2016-02-17T16:00:00.000Z</published>
    <updated>2016-03-05T07:06:59.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>目前，我正在开发自己的第一款 iOS App: <a href="https://github.com/tangqi92/SuperNote" target="_blank" rel="external">SuperNote</a>, 作为一款笔记类应用，其最基础也是最核心的功能便是富文本的编辑。起初为了能快速地实现此功能，我直接使用了 <a href="https://github.com/ibireme/YYText" target="_blank" rel="external">YYText</a>, 照着其 Demo 改了改便基本实现了需求，虽然看似便捷但随后我便发现自己其实是「知其然，而不知其所以然」，对于其中的实现原理只知胜少。</p>
<p>于是决定对富文本编辑的实现原理进行一探究竟，而 <a href="https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/CustomTextProcessing/CustomTextProcessing.html" target="_blank" rel="external">Text Kit</a> 便是今天的主角。</p>
<a id="more"></a> 
<h2 id="简介">简介</h2><p>苹果在 <a href="https://developer.apple.com/library/prerelease/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/CustomTextProcessing/CustomTextProcessing.html" target="_blank" rel="external">Text Programming Guide for iOS</a> 中对其做了如下解释:</p>
<blockquote>
<p>“Text Kit is a set of classes and protocols in the UIKit framework that provide high-quality typographical services which enable applications to store, lay out, and display text with all the characteristics of fine typesetting, such as kerning, ligatures, line-breaking, and justification.”</p>
</blockquote>
<p>一句话总结：Text Kit 就是为文字排版与渲染孕应而生的。</p>
<h3 id="历史">历史</h3><p><strong>iOS 2</strong>：这是第一个公开的 SDK，包括一个简单的文本显示组件（UILabel），一个简单的文本输入组件（UITextField），以及一个简单的、可滚动、可编辑的并且支持更大量文本的组件：UITextView。这些组件都只支持纯文本，没有文本选择支持（仅支持插入点），除了设置字体和文本颜色外几乎没有其他可定制功能。</p>
<p><strong>iOS 3</strong>：新特性有复制和粘贴，以及复制粘贴所需要的文本选择功能。数据探测器（Data Detector）为文本视图提供了一个高亮电话号码和链接的方法。然而，除了打开或关闭这些特性外，开发者基本上没有什么别的事情可以做。</p>
<p><strong>iOS 3.2</strong>：iPad 的出现带来了 CoreText，一个低级文本布局和渲染引擎（从Mac OS X 10.5 移植过来的），以及 UITextInput，就是前面也提到的键盘存取协议。</p>
<p><strong>iOS 4</strong>：iOS 3.2 发布仅仅几个月后就发布了，文本方面没有一丁点新功能。</p>
<p><strong>iOS 5</strong>：文本方面没啥变化。</p>
<p><strong>iOS 6</strong>：有些动作了：属性文本编辑被加入了 UITextView。很不幸的是，它很难定制。默认的 UI 有粗体、斜体和下划线。用户可以设置字体大小和颜色。粗看起来相当不错，但还是没法控制布局或者提供一个便利的途径来定制文本属性。然而对于（文本编辑）开发者，有一个大的新功能：可以继承 UITextView 了，这样的话，除了以前版本提供的键盘输入外，开发者可以“免费”获得文本选择功能。而在这以前，开发者必须实现一个完全自定义的文本选择功能，这可能是很多非纯文本工具的开发半途而废的原因。</p>
<p><strong>iOS 7</strong>：终于等来了 TextKit。</p>
<h3 id="架构">架构</h3><p>在 <strong>iOS 6 之前</strong>，WebView 通常是呈现混合风格，如粗体，斜体，甚至颜色文本的最简单方法。</p>
<p>在 <strong>iOS 6 时代</strong>，文本控件如：UILabel、UITextField 和 UITextView 是基于 String Drawing 和 WebKit 构建的。其中 String Drawing 与 Core Graphics 直接通信。因此在iOS 7 之前文本控件也可以实现多种样式的文字排版，但是事实上是通过 WebKit 实现的。WebKit 是一种浏览器内核技术，使用它进行文字渲染会消耗掉比较多的内存，对应用的性能有一定的影响。</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-text-kit-01.png" alt=""></p>
<p>在 <strong>iOS 7 时代</strong>，Text Kit 是建立在 Core Text 之上的，它通过 Core Text 与 Core Graphics 进行交互。而文本控件如：UILabel、UITextField 和 UITextView，则构建于 Text Kit 之上，可见这些文本控件可以利用 Text Kit 提供的 API 来对文字进行排版和渲染处理。从下图可见，UIWebView 是基于 WebKit 的，它不能使用 Text Kit 提供的功能。</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-text-kit-02.png" alt=""></p>
<h2 id="核心">核心</h2><p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-text-kit-04.png" alt=""></p>
<p>下面将对上图涉及到的核心类进行一一解释：</p>
<ul>
<li><p><code>UITextView</code>：<br>在 TextKit 中，有两个目的：第一，它是文本系统用来绘制的视图。文本视图它自己并不会做任何绘制；它仅仅提供一个供其它类绘制的区域。第二，处理所有的用户交互，具体来说，Text View 实现 UITextInput 的协议来处理键盘事件，它为用户提供了一种途径来设置一个插入点或选择文本。它并不对文本做任何实际上的改变，仅仅将这些改变请求转发给刚刚讨论的 Text Storage。</p>
</li>
<li><p><code>NSTextStorage</code>:<br>顾名思义，NSTextStorage 就是用来存储文本的字符和相关属性的，例如字体或段落信息等，因为它是 <code>NSMutableAttributedString</code> 的子类，这也就是为什么它来负责存储文本的属性。此外，当 NSTextStorage 中的字符或属性发生改变时，会通知 <code>NSLayoutManager</code>, 进而做到文本内容的显示更新。</p>
</li>
<li><p><code>NSLayoutManager</code>:<br>该类负责对文字进行编辑排版处理，将存储在 <code>NSTextStorage</code> 中的数据转换为可以在视图控件中显示的文本内容，并把字符编码映射到对应的字形上，然后将字形排版到 <code>NSTextContainer</code> 定义的区域中。</p>
</li>
<li><p><code>NSTextContainer</code>:<br>定义了文本可以排版的区域，默认情况下是矩形区域，如果是其他形状的区域，需要通过子类化 NSTextContainer 来创建。</p>
</li>
</ul>
<p>它们的关系可见下图：</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-text-kit-06.png" alt=""></p>
<p><code>NSLayoutManager</code> 对象从 <code>NSTextStorage</code> 对象中取得文本内容，进行排版，然后把排版之后的文本放到 <code>NSTextContainer</code> 对象指定的区域上。最后再由一个文本控件从 <code>NSTextContainer</code> 中取出内容显示到屏幕中。</p>
<h3 id="使用场景">使用场景</h3><p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-text-kit-09.png" alt=""></p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-text-kit-08.png" alt=""></p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-text-kit-07.png" alt=""></p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-text-kit-10.png" alt=""></p>
<h3 id="补充">补充</h3><ul>
<li><code>Core Text</code>: 没有直接包含在 TextKit 中，CoreText 是进行实际排版的库。对于布局管理器的每一步，CoreText 被这样或那样的方式调用。它提供了从字符到字形的翻译，用它们来填充行，以及建议断字点</li>
<li><code>NSAttributedString</code>: 就是用来设置文字的效果(颜色、字体、下划线等等)</li>
<li><p><code>NSMutableAttributedString</code>:是 NSAttributedString 的子类，可变类型的NSAttributedString</p>
<p>  <img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-text-kit-05.jpg" alt=""></p>
</li>
</ul>
<h2 id="功能">功能</h2><ul>
<li>对文字进行分页或多列排版</li>
<li>支持文字的换行、折叠和着色等处理</li>
<li>可以调整字与字之间的距离、行间距、文字大小、指定特定的字体</li>
<li>支持富文本编辑，可以自定义文字截断</li>
<li>支持凸版印刷效果（letterpress）</li>
<li>支持数据类型的检测（例如链接、附件等）</li>
<li>效果如下图所示：</li>
</ul>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-text-kit-11.png" alt=""></p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-text-kit-12.png" alt=""></p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/the-notes-of-learning-text-kit-13.png" alt=""></p>
<p>本文并不会对具体功能的实现进行详细的阐述，毕竟本文重点是了解内在的实现原理而非具体实现。好啦，剩下的事情就交给你了！</p>
<h2 id="参考">参考</h2><ul>
<li><a href="https://developer.apple.com/library/prerelease/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/CustomTextProcessing/CustomTextProcessing.html" target="_blank" rel="external">Using Text Kit to Draw and Manage Text</a></li>
<li><a href="https://www.objc.io/issues/5-ios7/getting-to-know-textkit/" target="_blank" rel="external">Getting to Know TextKit</a></li>
<li><a href="https://www.raywenderlich.com/50151/text-kit-tutorial" target="_blank" rel="external">Text Kit Tutorial</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>目前，我正在开发自己的第一款 iOS App: <a href="https://github.com/tangqi92/SuperNote">SuperNote</a>, 作为一款笔记类应用，其最基础也是最核心的功能便是富文本的编辑。起初为了能快速地实现此功能，我直接使用了 <a href="https://github.com/ibireme/YYText">YYText</a>, 照着其 Demo 改了改便基本实现了需求，虽然看似便捷但随后我便发现自己其实是「知其然，而不知其所以然」，对于其中的实现原理只知胜少。</p>
<p>于是决定对富文本编辑的实现原理进行一探究竟，而 <a href="https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/CustomTextProcessing/CustomTextProcessing.html">Text Kit</a> 便是今天的主角。</p>]]>
    
    </summary>
    
      <category term="Notes" scheme="http://itangqi.me/tags/Notes/"/>
    
      <category term="iOS" scheme="http://itangqi.me/tags/iOS/"/>
    
      <category term="iOS" scheme="http://itangqi.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自学 iOS 开发之旅]]></title>
    <link href="http://itangqi.me/2016/02/08/the-journey-of-learning-ios/"/>
    <id>http://itangqi.me/2016/02/08/the-journey-of-learning-ios/</id>
    <published>2016-02-07T16:00:00.000Z</published>
    <updated>2016-02-25T05:43:02.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><blockquote>
<p>不知不觉，学习 iOS 开发已经有 3 个多月的时间了，我想，也是时候写篇文章作为总结与回顾了吧。</p>
</blockquote>
<a id="more"></a> 
<p>我相信，很多人都会有这样的经历：每当他在学习一门新语言时，都会阅读许多 <strong>XXX 自学必备资源</strong> 这类的文章，然后一股脑地买下推荐的书，收藏推荐的网站，下载推荐的视频，订阅推荐的邮箱，注册推荐的论坛等等，当时那个热血沸腾劲，心中一定默默地告诉自己：「来吧，我 XXX 要大干一场了！」</p>
<p>然而现实却是：在经过几天的热血过后，你会发现其实你并没有那么多精力与时间去学习去消化那么多资料，一方面的确是因为你时间有限，另一方面更因为并不是所有的都适合现阶段的你。一段时间过，你会发现有些收藏的网站你始终未打开过，有些订阅的邮件你从未阅读过，有些下载的视频你从未看过。</p>
<p>所以，凡事都不能心急与贪多，稳扎稳打方能在学习的道路上越走越远。文中所列出的资料（均以时间为顺序排列），都是到目前为止我所学习过的，并且我会定期更新文章，记录我一步步从小白到<strong>大牛</strong>的心路历程（真是不要脸啊！）。</p>
<h2 id="书籍">书籍</h2><ul>
<li><p><a href="http://book.douban.com/subject/19962787/" target="_blank" rel="external">Objective-C 编程</a></p>
<p>本书首先从基本的编程概念讲起（变量、条件语句、循环结构等），接着用浅显易懂的语言讲解 Objective-C 和 Foundation 的知识，包括 Objective-C 的基本语法、 Foundation 常用类 、内存管理、常用设计模式等。—— 本书内容浅显易懂，比较适合作为 OC 的入门书籍。</p>
</li>
</ul>
<ul>
<li><p><a href="http://book.douban.com/subject/26287812/" target="_blank" rel="external">iOS 编程（第4版）</a></p>
<p>本书涵盖了开发 iOS 应用的方方面面：从 Objective-C 基础知识到新增加的语言特性；从 AppKit 库到常见的 Cocoa 设计模式；从 Xcode 技巧到 Instruments 等。—— 本书手把手带你一步步完成一个完整的 iOS 应用，随着章节的深入，循序渐进地不断完善与优化，让你深切体会到开发一款应用所需了解的方方面面。</p>
</li>
</ul>
<ul>
<li><p><a href="http://book.douban.com/subject/26287173/" target="_blank" rel="external">iOS 开发进阶</a></p>
<p>本书分工具、实践、理论三大部分：第一部分介绍 iOS 开发的常用工具；第二部分介绍 iOS 开发中的一些常见的实践经验；第三部分介绍 iOS 开发中涉及的原理。—— 本书中绝大部分内容都能在作者的博客中找到，所谓「进阶」，我想作者更多的是在抛砖引玉吧。</p>
</li>
</ul>
<ul>
<li><p><a href="http://book.douban.com/subject/24284008/" target="_blank" rel="external">Objective-C 基础教程</a></p>
<p>本书全面系统地讲述了 Objective-C 的基础知识和面向对象编程的重要概念，结合实例介绍了 Cocoa 工具包的优秀特性及框架，以及继承、复合、对象初始化、类别、协议、内存管理和源文件组织等重要编程技术。—— 本想作为 OC 的进阶书籍阅读，但并没有预期中好。</p>
</li>
</ul>
<ul>
<li><p><a href="http://book.douban.com/subject/19967897/" target="_blank" rel="external">Objective-C 程序设计</a></p>
<p>本书是针对初学者编写的一个完整又循序渐进的 Objective-C 语言权威入门。阅读本书，不需要先学过 C 语言或其他面向对象语言。本书包含许多详细且实用的范例，用来告诉你如何在实践中运用Objective-C。本书完整展示如何利用 Foundation framework 所提供的丰富自带类库 (Library of classes)，并对 iOS 程序设计原理有所讲解。—— 与《Objective-C 编程》同样作为入门书籍，内容相对前者详实许多。</p>
</li>
</ul>
<ul>
<li><p><a href="http://book.douban.com/subject/24720270/" target="_blank" rel="external">Objective-C 高级编程</a></p>
<p>本书主要介绍 iOS 与 OS X 多线程和内存管理, 深入破析了苹果官方公布的源代码, 告诉你一些苹果公司官方文档中不会出现的知识。—— 真正的 OC 进阶书籍，满满的干货，值得反复阅读。</p>
</li>
<li><p><a href="http://book.douban.com/subject/25829244/" target="_blank" rel="external">Effective Objective-C 2.0</a></p>
<p>本书从语法、接口与 API 设计、内存管理、框架等 7 大方面总结和探讨了 Objective-C 编程中 52 个鲜为人知和容易被忽视的特性与陷阱。书中包含大量实用范例代码，为编写易于理解、便于维护、易于扩展和高效的 Objective-C  应用提供了解决方案。—— Effective 系列为进阶必备之书，但我认为应该在有一定的项目经验后回过头来阅读，才更能体会其中的精髓。</p>
</li>
</ul>
<ul>
<li><p><a href="http://producter.io/" target="_blank" rel="external">Producer</a> by <a href="http://weibo.com/kevinzhow" target="_blank" rel="external">周楷雯Kevin</a> </p>
<p>本书主要涵盖了：设计原理、原型，动效，交互设计、iOS 开发与营销，这四个部分，以 <strong>小记</strong> 作为例子，完整的还原了一款产品从想法到编码，再到上架，以及营销的全过程。 —— 它会作为叩响你成为独立开发者大门的敲门砖。</p>
</li>
</ul>
<ul>
<li><p><a href="https://gumroad.com/l/JnWS" target="_blank" rel="external">A GUIDE TO IOS ANIMATION</a> by <a href="http://weibo.com/imapplegeeker" target="_blank" rel="external">KITTEN-YANG</a> </p>
<p>动画小王子的力作 —— 如何你想学习动画，那么就选它作为入门吧。</p>
</li>
</ul>
<h2 id="视频">视频</h2><ul>
<li><a href="https://itunes.apple.com/us/course/developing-ios-7-apps-for/id733644550" target="_blank" rel="external">Developing iOS 7 Apps for iPhone and iPad</a> —— 目前唯一看过的视频教程，老爷子讲得非常棒，如果你想学习 Swift ，可以搜索其相应的课程。我是一边看视频一边将课上所讲的例子都手敲实现了一遍，最后对 iOS 开发有了较全面的了解。</li>
<li><a href="https://developer.apple.com/videos/" target="_blank" rel="external">WWDC Session</a> —— 苹果自家的视频，内容相当多，计划之后空下来按系列来看。</li>
</ul>
<h2 id="开源项目">开源项目</h2><ul>
<li><p><a href="https://github.com/dsxNiubility/SXNews" target="_blank" rel="external">SXNews</a></p>
<p>精仿网易新闻客户端 —— 学习 Android 时第一个仿写的应用便是网易新闻。</p>
</li>
<li><p><a href="https://github.com/hshpy/HPYZhiHuDaily" target="_blank" rel="external">HPYZhiHuDailly</a></p>
<p>采用 MVVM 的 OC 版知乎客户端 —— 第一个 Android 开源项目便是仿写知乎。</p>
</li>
<li><p><a href="https://github.com/liaojinxing/Voice2Note" target="_blank" rel="external">Voice2Note</a></p>
<p>懒人笔记客户端 —— 第一个完整的 iOS 应用便是以此为基础进行修修改改的。</p>
</li>
<li><p><a href="https://github.com/meilbn/MyOne-iOS" target="_blank" rel="external">MyOne</a></p>
<p>精仿「一个」iOS 客户端 —— 代码规范，难度适中，非常适合拿来当做练手的项目。目前希望能将其剩余未完成的功能完成。</p>
</li>
<li><p><a href="https://github.com/Coding/Coding-iOS" target="_blank" rel="external"> Coding</a></p>
<p>Coding 官方 iOS 客户端 —— 官方源码，编写规范，文档较完整，且不断更新中，是个进阶学习的项目。</p>
</li>
</ul>
<h2 id="博客">博客</h2><ul>
<li><p><a href="https://www.objc.io/" target="_blank" rel="external">objc</a></p>
<p>  objc.io 国外一个定期发布关于 Objective-c 的最佳实践以及进阶技术的网站，基本上是每月一期，每期关注一个技术主题，围绕这个主题，有几篇文章涉及到本主题的不同方面。</p>
</li>
</ul>
<p>当然，我订阅了许多国内外大牛的技术博客，但是我觉得，如果不是系列性的文章，我更喜欢<strong>通过 Google 搜索关键字来快速寻找出最符合我当下要求的文章来阅读学习</strong>。</p>
<h2 id="其他">其他</h2><ul>
<li><p><a href="https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01%E3%80%8A%E6%8B%9B%E8%81%98%E4%B8%80%E4%B8%AA%E9%9D%A0%E8%B0%B1%E7%9A%84iOS%E3%80%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88/%E3%80%8A%E6%8B%9B%E8%81%98%E4%B8%80%E4%B8%AA%E9%9D%A0%E8%B0%B1%E7%9A%84iOS%E3%80%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88%EF%BC%88%E4%B8%8A%EF%BC%89.md" target="_blank" rel="external">《招聘一个靠谱的 iOS》面试题参考答案</a></p>
<p>面试题来自 <a href="http://weibo.com/u/1364395395" target="_blank" rel="external">微博@我就叫Sunny怎么了</a> 的博文<a href="http://blog.sunnyxx.com/2015/07/04/ios-interview/" target="_blank" rel="external">《招聘一个靠谱的 iOS》</a>，其中共 55 题，除第 1 题为纠错题外，其他 54 道均为简答题，答案为 <a href="http://weibo.com/luohanchenyilong/" target="_blank" rel="external">微博@iOS程序犭袁</a> 整理。—— 由于有年后进行实习生面试的计划，所以，我每天都会来看上两题。当然，即使你不为面试，这里的题目也可以作为检验你学习成果的一个有效方法。</p>
</li>
</ul>
<blockquote>
<p>未完待续……</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><blockquote>
<p>不知不觉，学习 iOS 开发已经有 3 个多月的时间了，我想，也是时候写篇文章作为总结与回顾了吧。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Summary" scheme="http://itangqi.me/tags/Summary/"/>
    
      <category term="iOS" scheme="http://itangqi.me/tags/iOS/"/>
    
      <category term="iOS" scheme="http://itangqi.me/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bye 2015, Hi 2016]]></title>
    <link href="http://itangqi.me/2015/12/25/bye2015-hi2016/"/>
    <id>http://itangqi.me/2015/12/25/bye2015-hi2016/</id>
    <published>2015-12-24T16:00:00.000Z</published>
    <updated>2016-02-25T05:44:11.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>世上哪有终点？什么时候你走不动了，倒下了，那里才是终点。—— 今何在《西游日记》</p>
</blockquote>
<a id="more"></a>
<h2 id="考研">考研</h2><p>2015 年 3 月 25 日，当我接到录取通知电话的那一刻，压在我心底的所有，顷刻间都释然了。</p>
<p>喜悦的心情只持续了片刻吧，我脑海中的思绪便飘回到了 2014 年。</p>
<p>那年是我第一次考研，考试前，几乎所有认识我的人，都认为我考上是铁板钉钉的事，而对我而言，我不但要求自己要考上而且还要考第一。可想而知，正是这样的心态导致了我在考场上的心态失衡，而最终的结果便是以我彻彻底底地失败告终。</p>
<p>没错，不愿就此放弃，确切的说，不愿就此否定自己的我选择了二战。由于时间尚早，加之马上面临毕业的我不愿再向家人伸手要钱了，所以我选择立马工作来作为那段时间的过度。</p>
<p>于是……</p>
<p>思绪不知不觉又飘了回来，此时的我还在北信源南京研发中心，回想过去的一年，整个移动开发团队由最初的 3 人扩展到现在的 10 人。感谢已经离职的大飞哥，正是你当时的赏识让我有幸加入，尽管当时你已经提出离职，还是尽职尽责地带着我们几个新人熟悉项目并帮助我们快速提升技术；感谢团队现在的老大王总和姚总，你们为人非常和蔼平易敬人，会尽一切努力为团队的利益着想；感谢一起共事过的小伙伴们，没有你们，我真的无法在在职的情况下完成考研的复习，是你们给了我支持与信任。</p>
<p>对我而言，考研是一种历练，而过程远远大于结果。</p>
<h2 id="跳槽">跳槽</h2><p>2015 年 5 月 6 日，在面试结束后，我当场便收到了 FriendMedia 的 Offer，像这样一个小而美且工程师文化浓厚的团队，正是我梦寐以求想要加入的。与此同时，我也到了和北信源说再见的时候了。</p>
<p>舒适的工作环境，扁平化的管理模式，聪明且有激情的同事，富有挑战性的工作，在 FM 的每一天都充满着压力但却快速的成长着。</p>
<p>入职后我便由师哥带着参与到公司核心产品的开发，由于能力有限，我的工作从实现界面 UI 开始，看似简单的工作内容，实践起来却总会遇到各种各样的问题。放到之前，我会索性告诉领导这个做不了，但现在我却是加班加点想尽办法去实现，我想正是因为归属感吧。</p>
<p>由于界面的改版得到了师哥和老总的认可，我得到了完成下一版本某关键功能的开发任务，由于是创业公司，我们奉行快速迭代，可要在短时间内完成，对于当时的我来说，是非常具有挑战性的。最终，尽管我为此熬了好几个夜，也没能在 Deadline 前百分百完成任务。事后，师哥帮我填了坑，王总则教会了我将来在面对此类问题时，一定要及时向大家提出，埋头苦干不是解决问题的办法。</p>
<p>虽然公司不大，但每一个人都是独挡一面的能手，而当时的我却似乎在拖大家的后腿，无形的压力与内疚充斥着我每天的工作，但公司或者说王总的包容却坚定我要努力证明自己的价值。恰巧此时公司有一个国外的外包项目需要改版升级，由于师哥要接着负责公司自己的产品，这个外包项目便顺理成章的由我来完成。</p>
<p>庆幸的是，改版过程相对顺利，我在预定的时间内完成了任务，期间我的能力也得到了迅速的提升，我能对一个项目有较为完整的把控。可此时，时间也悄悄来到了 8 月下旬。</p>
<p>短暂却充实的三个月很快就结束了，我也到了不得不和 FM 说再见的时候了。在这里，我结识了一群聪明且又友爱的伙伴们；在这里，我体会到了创业公司的激情与不易；在这里，我一步步走向了 Android 开发的正轨。感谢 FM 带给我的一切，愿你的未来一帆风顺。</p>
<h2 id="重返校园">重返校园</h2><p>2015 年 8 月 31 日，我正式成为东大软院的一名研究僧。从大专到本三再到重点本科，一路走来，我从未想证明给任何人看，我只是单纯的不信邪，我始终坚信着我可以。</p>
<p>正是因为之前的工作经历，让我比其他应届的同学有着更为清晰的自我认识与更为明确的职业规划，对于选择明年就出去实习的我而言，我很清楚其实留给我的时间不多了。</p>
<p>回首过去的四个月，<strong>开源</strong> 与 <strong>iOS</strong> 不得不提。</p>
<p>开学以来，陆续开源了 BuildingBlocks、 Android-Tips 与 WaveLoadingView 三个项目，因为开源，我认识了许多志同道合的朋友们（大牛们）；因为开源，我意识到自己的付出是有价值的；因为开源，我不断向她汲取着知识的同时也分享着成果。我很庆幸能叩响开源的这扇大门，得以让我能见识到开源世界的种种美好，这些带给我的快乐与满足，要远远比收集到的星星数与粉丝数重要的多得多。</p>
<p>而转战 iOS，则是再一次从了自己的内心，即使周围的很多人都不理解，即使现在很多人说 iOS 市场已经饱和，在这里，我不想过多的探讨 iOS 与 Android 的孰优孰劣，亦或是未来的前景如何，但我知道，我只是单纯的选择了一件自己更喜欢的事情去做，对我而言就够了。我的一个 iOS 项目现在也接近尾声了，期待开源的那一天吧。</p>
<p>除此之外，我还在努力地夯实基础与扩充技术栈，从数据结构到算法再到前端最后到设计，每接触到一个新领域，总能有发现新大陆般的喜悦与激动。</p>
<h2 id="<2016>"><2016></2016></h2><p>下一站会是哪里？我会遇到怎样的人？还会经历哪些磨砺？– 我不知道，但我很期待！</p>
<h2 id="书单列表">书单列表</h2><ol>
<li><a href="http://book.douban.com/subject/1770782/" target="_blank" rel="external">追风筝的人</a></li>
<li><a href="http://book.douban.com/subject/10763902/" target="_blank" rel="external">偷影子的人</a></li>
<li><a href="http://book.douban.com/subject/25850737/" target="_blank" rel="external">想得美</a></li>
<li><a href="http://book.douban.com/subject/26183838/" target="_blank" rel="external">我想看到的世界</a></li>
<li><a href="http://book.douban.com/subject/26266755/" target="_blank" rel="external">塔利班</a></li>
<li><a href="http://book.douban.com/subject/26613294/" target="_blank" rel="external">Objective-C编程(第2版)</a></li>
<li><a href="http://book.douban.com/subject/26287812/" target="_blank" rel="external">iOS编程（第4版）</a></li>
<li><a href="http://book.douban.com/subject/26287173/" target="_blank" rel="external">iOS开发进阶</a></li>
<li><a href="http://book.douban.com/subject/25752357/" target="_blank" rel="external">Head First HTML与CSS(第2版)</a></li>
</ol>
<h2 id="Podcast_列表">Podcast 列表</h2><ol>
<li><a href="https://ipn.li/itgonglun/" target="_blank" rel="external">IT 公论</a></li>
<li><a href="https://ipn.li/kernelpanic/" target="_blank" rel="external">内核恐慌</a></li>
<li><a href="http://teahour.fm/" target="_blank" rel="external">Teahour</a></li>
<li><a href="https://ipn.li/xuanmei/" target="_blank" rel="external">选·美</a></li>
</ol>
<h2 id="推荐利器">推荐利器</h2><p><a href="https://getpocket.com" target="_blank" rel="external">Pocket</a></p>
<h2 id="无主题">无主题</h2><blockquote>
<p>感谢过去一年我所经历的事，感谢过去一年我所遇到的人，感谢过去一年我所收获和失去的情感。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>世上哪有终点？什么时候你走不动了，倒下了，那里才是终点。—— 今何在《西游日记》</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Review" scheme="http://itangqi.me/tags/Review/"/>
    
      <category term="Summary" scheme="http://itangqi.me/tags/Summary/"/>
    
      <category term="Life" scheme="http://itangqi.me/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WaveLoadingView - 水波加载]]></title>
    <link href="http://itangqi.me/2015/12/15/waveloadingview/"/>
    <id>http://itangqi.me/2015/12/15/waveloadingview/</id>
    <published>2015-12-14T16:00:00.000Z</published>
    <updated>2016-02-25T05:42:34.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><strong>WaveLoadingView</strong> - An Android library that provides a realistic wave-loading effect.</p>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="Sample">Sample</h2><p><img src="http://7xikfc.com1.z0.glb.clouddn.com/waveloadingview.png" alt="sample" title="sample" width="400" height="680"></p>
<hr>
<h2 id="Usage">Usage</h2><p><strong>For a working implementation of this project see the <code>sample/</code> folder.</strong></p>
<h3 id="Step_1">Step 1</h3><p>Include the library as a local library project or add the dependency in your build.gradle.</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'me.itangqi.waveloadingview:library:0.2.0'</span></span><br><span class="line">    <span class="comment">// I have uploaded v0.2.0 on 2016-02-17, if it doesn't take effect or your </span></span><br><span class="line">    <span class="comment">// gradle cannot find it in maven central, you may try v0.1.5. </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 
<p>Or</p>
<p>Import the library, then add it to your /settings.gradle and /app/build.gradle. If you don’t know how to do this, you can read my blog for help.</p>
<h3 id="Step_2">Step 2</h3><p>Include the WaveLoadingView widget in your layout. And you can customize it like this.</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;me.itangqi.waveloadingview.WaveLoadingView</span><br><span class="line">    android:id=<span class="string">"@+id/waveLoadingView"</span></span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    <span class="keyword">app</span>:wlv_borderColor=<span class="string">"@color/colorAccent"</span></span><br><span class="line">    <span class="keyword">app</span>:wlv_borderWidth=<span class="string">"3dp"</span></span><br><span class="line">    <span class="keyword">app</span>:wlv_progressValue=<span class="string">"40"</span></span><br><span class="line">    <span class="keyword">app</span>:wlv_shapeType=<span class="string">"circle"</span></span><br><span class="line">    <span class="keyword">app</span>:wlv_titleBottom=<span class="string">"Bottom Title"</span></span><br><span class="line">    <span class="keyword">app</span>:wlv_titleBottomColor=<span class="string">"@color/colorPrimaryText"</span></span><br><span class="line">    <span class="keyword">app</span>:wlv_titleBottomSize=<span class="string">"20sp"</span></span><br><span class="line">    <span class="keyword">app</span>:wlv_titleCenter=<span class="string">"Center Title"</span></span><br><span class="line">    <span class="keyword">app</span>:wlv_titleCenterColor=<span class="string">"@color/colorPrimaryText"</span></span><br><span class="line">    <span class="keyword">app</span>:wlv_titleCenterSize=<span class="string">"24sp"</span></span><br><span class="line">    <span class="keyword">app</span>:wlv_titleTop=<span class="string">"Top Title"</span></span><br><span class="line">    <span class="keyword">app</span>:wlv_titleTopColor=<span class="string">"@color/colorPrimaryText"</span></span><br><span class="line">    <span class="keyword">app</span>:wlv_titleTopSize=<span class="string">"20sp"</span></span><br><span class="line">    <span class="keyword">app</span>:wlv_waveAmplitude=<span class="string">"70"</span></span><br><span class="line">    <span class="keyword">app</span>:wlv_waveColor=<span class="string">"@color/colorAccent"</span>/&gt;</span><br></pre></td></tr></table></figure> 
<h3 id="Step_3">Step 3</h3><p>You can write some animation codes to the callbacks such as setOnCheckedChangeListener, onProgressChanged, etc in your Activity.</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">WaveLoadingView mWaveLoadingView = (WaveLoadingView) findViewById(R.id.waveLoadingView)<span class="comment">;</span></span><br><span class="line">truemWaveLoadingView.setShapeType(WaveLoadingView.ShapeType.CIRCLE)<span class="comment">;</span></span><br><span class="line">truemWaveLoadingView.setTopTitle("Top Title")<span class="comment">;</span></span><br><span class="line">truemWaveLoadingView.setCenterTitleColor(Color.GRAY)<span class="comment">;</span></span><br><span class="line">truemWaveLoadingView.setBottomTitleSize(18)<span class="comment">;</span></span><br><span class="line">truemWaveLoadingView.setProgressValue(80)<span class="comment">;</span></span><br><span class="line">truemWaveLoadingView.setBorderWidth(10)<span class="comment">;</span></span><br><span class="line">truemWaveLoadingView.setAmplitudeRatio(60)<span class="comment">;</span></span><br><span class="line">truemWaveLoadingView.setWaveColor(Color.GRAY)<span class="comment">;</span></span><br><span class="line">truemWaveLoadingView.setBorderColor(Color.GRAY)<span class="comment">;</span></span><br></pre></td></tr></table></figure> 
<h2 id="Customization">Customization</h2><p>Do what you what :)</p>
<table>
<thead>
<tr>
<th style="text-align:center">name</th>
<th style="text-align:center">format</th>
<th style="text-align:center">description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">wlv_borderWidth</td>
<td style="text-align:center">dimension</td>
<td style="text-align:center">set border width, default is 0</td>
</tr>
<tr>
<td style="text-align:center">wlv_borderColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">set border color</td>
</tr>
<tr>
<td style="text-align:center">wlv_progressValue</td>
<td style="text-align:center">integer</td>
<td style="text-align:center">set progress value, default is 50</td>
</tr>
<tr>
<td style="text-align:center">wlv_shapeType</td>
<td style="text-align:center">enum</td>
<td style="text-align:center">set shape type, default is circle</td>
</tr>
<tr>
<td style="text-align:center">wlv_waveColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">set wave color</td>
</tr>
<tr>
<td style="text-align:center">wlv_waveAmplitude</td>
<td style="text-align:center">float</td>
<td style="text-align:center">set wave amplitude</td>
</tr>
<tr>
<td style="text-align:center">wlv_titleTopSize</td>
<td style="text-align:center">dimension</td>
<td style="text-align:center">set top title size, default is 18 </td>
</tr>
<tr>
<td style="text-align:center">wlv_titleCenterSize</td>
<td style="text-align:center">dimension</td>
<td style="text-align:center">set center title size, default is 22</td>
</tr>
<tr>
<td style="text-align:center">wlv_titleBottomSize</td>
<td style="text-align:center">dimension</td>
<td style="text-align:center">set bottom size, default is 18</td>
</tr>
<tr>
<td style="text-align:center">wlv_titleTopColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">set top title color</td>
</tr>
<tr>
<td style="text-align:center">wlv_titleCenterColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">set center title color </td>
</tr>
<tr>
<td style="text-align:center">wlv_titleBottomColor</td>
<td style="text-align:center">color</td>
<td style="text-align:center">set bottom title color </td>
</tr>
<tr>
<td style="text-align:center">wlv_titleTop</td>
<td style="text-align:center">string</td>
<td style="text-align:center">set top title content, default is null</td>
</tr>
<tr>
<td style="text-align:center">wlv_titleCenter</td>
<td style="text-align:center">string</td>
<td style="text-align:center">set center title content, default is null</td>
</tr>
<tr>
<td style="text-align:center">wlv_titleBottom</td>
<td style="text-align:center">string</td>
<td style="text-align:center">set bottom title content, default is null</td>
</tr>
</tbody>
</table>
<p><strong>All attributes have their respective getters and setters to change them at runtime.</strong></p>
<h2 id="Change_Log">Change Log</h2><h3 id="0-2-0_(2016-02-17)">0.2.0 (2016-02-17)</h3><h4 id="Implemented_enhancements:">Implemented enhancements:</h4><ul>
<li>Prefix the attributes with “wlv”</li>
</ul>
<h4 id="Fixed_bugs:">Fixed bugs:</h4><ul>
<li>setProgressValue() increase doesn’t conform to logic <a href="https://github.com/tangqi92/WaveLoadingView/issues/8" target="_blank" rel="external">#8</a></li>
</ul>
<h4 id="Update:">Update:</h4><ul>
<li>Update <code>build.gradle</code></li>
<li>Update Sample</li>
</ul>
<h3 id="0-1-5_(2016-01-14)">0.1.5 (2016-01-14)</h3><h4 id="Fixed_bugs:-1">Fixed bugs:</h4><ul>
<li>IllegalArgumentException: width and height must be &gt; 0 while loading Bitmap from View <a href="https://github.com/tangqi92/WaveLoadingView/issues/6" target="_blank" rel="external">#6</a></li>
</ul>
<h3 id="0-1-4_(2015-12-17)">0.1.4 (2015-12-17)</h3><h4 id="Fixed_bugs:-2">Fixed bugs:</h4><ul>
<li>setProgressValue() doesn’t change the value of mProgressValue <a href="https://github.com/tangqi92/WaveLoadingView/issues/4" target="_blank" rel="external">#4</a></li>
</ul>
<h3 id="0-1-3">0.1.3</h3><h4 id="Fixed_bugs:-3">Fixed bugs:</h4><ul>
<li>Attribute “borderWidth” has already been defined <a href="https://github.com/tangqi92/WaveLoadingView/issues/2" target="_blank" rel="external">#2</a></li>
</ul>
<h2 id="Demo">Demo</h2><p><a href="https://github.com/tangqi92/WaveLoadingView/releases/download/v0.1.2/sample-release-unsigned.apk" target="_blank" rel="external">Download</a></p>
<h2 id="Community">Community</h2><p>Looking for contributors, feel free to fork !</p>
<p>Tell me if you’re using my library in your application, I’ll share it in this README.</p>
<h2 id="Thanks">Thanks</h2><p>Inspired by </p>
<ul>
<li><a href="https://github.com/gelitenight/WaveView" target="_blank" rel="external">WaveView</a> created by <a href="https://github.com/gelitenight" target="_blank" rel="external">gelitenight</a></li>
<li><a href="https://github.com/lopspower/CircularFillableLoaders" target="_blank" rel="external">CircularFillableLoaders</a> created by <a href="https://github.com/lopspower" target="_blank" rel="external">lopspower</a></li>
</ul>
<h2 id="License">License</h2><p>Apache 2.0 </p>
<hr>
<h2 id="期待与你成为朋友">期待与你成为朋友</h2><ul>
<li>Weibo: <a href="http://weibo.com/qiktang" target="_blank" rel="external">汤奇V</a>  </li>
<li>GitHub: <a href="https://github.com/tangqi92" target="_blank" rel="external">tangqi92</a></li>
<li>Blog: <a href="http://itangqi.me/">http://itangqi.me</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><strong>WaveLoadingView</strong> - An Android library that provides a realistic wave-loading effect.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Library" scheme="http://itangqi.me/tags/Library/"/>
    
      <category term="Loading" scheme="http://itangqi.me/tags/Loading/"/>
    
      <category term="View" scheme="http://itangqi.me/tags/View/"/>
    
      <category term="Android" scheme="http://itangqi.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[回归·日记]]></title>
    <link href="http://itangqi.me/2015/11/02/comeback-diary/"/>
    <id>http://itangqi.me/2015/11/02/comeback-diary/</id>
    <published>2015-11-01T16:00:00.000Z</published>
    <updated>2016-02-25T05:43:59.000Z</updated>
    <content type="html"><![CDATA[<h3 id="2015年8月21日">2015年8月21日</h3><p>这一天，我结束了在 <a href="http://friendmedia.com/" target="_blank" rel="external">FriendMedia</a> 三个月短暂却又充实的工作。在这里，我结识了一群聪明且又友爱的伙伴；在这里，我体会到了创业公司的激情与不易；在这里，我一步步走向了 Android 开发的正轨。感谢 FM 给我的一切，愿你的未来一帆风顺。</p>
<p>离职回到家后，由于身体的原因，我逼迫自己休息了一个星期，上午睡个懒觉，下午看看综艺节目，饭后出门散个步，晚上陪老妈扯会家常。让自己慢下来，不看技术文档与满屏的代码，享受与家人在一起的悠闲时光，我很珍惜，真的。</p>
<a id="more"></a> 
<hr>
<h3 id="2015年8月31日">2015年8月31日</h3><p>这一天，我成为了 <a href="http://www.seu.edu.cn/" target="_blank" rel="external">东南大学</a> 软件学院的一名研究僧。从 <a href="http://www.ccit.js.cn/" target="_blank" rel="external">常信</a> 到 <a href="http://cxxy.seu.edu.cn/" target="_blank" rel="external">成贤</a> 再到 <a href="http://www.seu.edu.cn/" target="_blank" rel="external">东大</a>，从大专到本三再到重点本科，一路走来，我从未想证明给任何人看，我只是单纯的「不信邪」，我始终坚信「我可以」。</p>
<p>我心里清楚，从报到的那一刻起，之前所取得的就已经成为过去。而想想下一个目标，既感到鸭梨山大又是那么的激动人心呢。在经历 FM 的历练过后，我对自己未来的职业发展有了更清晰的认识，研究生的日子更多的是靠自己规划，而我也正按着计划一步步的进行着。</p>
<hr>
<h3 id="2015年9月4日">2015年9月4日</h3><p>这一天，<a href="https://github.com/tangqi92/BuildingBlocks" target="_blank" rel="external">BuildingBlocks - 积木</a> 开源了，第一个正儿八经写的小应用，之后便是以每两周一个小版本的速度进行迭代，目标是持续更新到V1.0。</p>
<hr>
<h3 id="2015年9月14日">2015年9月14日</h3><p>这一天，<a href="https://github.com/tangqi92/Android-Tips" target="_blank" rel="external">Android-Tips 填坑手册</a> 开源了，原本只想作为备份书签使用，却意外地收获了大家的支持，Star 数远远超出了自己的预期，4天内就突破了1K。</p>
<p>随着项目得到越来越多人的关注，无形中也鞭策着自己不断前进。在接下来的一个月的时间里，我大部分时间都在进行版本的更新。真心感谢开源，让我不断进步的同时，也认识了许多志同道合的好友们。</p>
<hr>
<h3 id="2015年10月8日">2015年10月8日</h3><p>这一天，闲不下来的我，决定扩充自己的技能树。</p>
<p>首先是<strong>设计</strong>，初衷就是想给自己将来的应用画个漂亮的图标，于是参考 <a href="http://www.zhihu.com/question/23421455" target="_blank" rel="external">有没有 Sketch 相关的教程或者素材下载？</a> 问题下的答案，进行 Sketch 的学习与使用。</p>
<p>其次是<strong>前端</strong>，参考 <a href="http://www.zhihu.com/question/19809484" target="_blank" rel="external">有哪些关于前端开发技术（HTML、CSS 和 JavaScript 等）的值得推荐的书籍？</a> 问题下的答案，买了本 <a href="http://book.douban.com/subject/25752357/" target="_blank" rel="external">Head First HTML与CSS（第2版）</a> 就开始了，然后跟着慕课网 <a href="http://www.imooc.com/course/programdetail/pid/32" target="_blank" rel="external">Web前端工程师</a> 的课程学习。</p>
<p>接下来是<strong>算法</strong>，参考 <a href="http://www.zhihu.com/question/19981544" target="_blank" rel="external">怎样学算法？</a> 问题下的答案，买了本 <a href="http://book.douban.com/subject/10432347/" target="_blank" rel="external">算法</a> 并跟着 coursera 上配套教学视频 <a href="https://www.coursera.org/course/algs4partI" target="_blank" rel="external">算法，第一部分</a> 进行学习。 计划每天刷 <a href="https://leetcode.com/" target="_blank" rel="external">LeetCode</a>，并在 GitHub 上记录<a href="https://github.com/tangqi92/LeetCode" target="_blank" rel="external">解题的思路与答案</a>。</p>
<p>最后，作为一名伪文艺青年，怎能不涉猎文学书籍，期间看完了<a href="http://book.douban.com/subject/26266755/" target="_blank" rel="external">塔利班</a>，现在正看着<a href="http://book.douban.com/subject/24380577/" target="_blank" rel="external">平凡的世界</a>。</p>
<hr>
<h3 id="2015年11月2日">2015年11月2日</h3><p>今天，是我<strong>回归</strong>的日子。</p>
<p>其实很多人不知道，在过去的两年多时间里，我经历了太多太多，我收获了许多，但也失去了许多，过去的经历教会了我成长。</p>
<p>今天是我停药的第7天，在饱受胃病折磨的一年时间里，我的斗志与激情正一点点被消磨，心有余而力不足的感觉糟透了，很多时候，我想做的更多更好，但自己的身体却不容许我全身心的投入进去。</p>
<p>但一切都会过去不是吗？我一直在等今天，等我的胃病痊愈，等我找回那个充满干劲的自己，我想，就是现在了。</p>
<p>是的，我回来了！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="2015年8月21日">2015年8月21日</h3><p>这一天，我结束了在 <a href="http://friendmedia.com/">FriendMedia</a> 三个月短暂却又充实的工作。在这里，我结识了一群聪明且又友爱的伙伴；在这里，我体会到了创业公司的激情与不易；在这里，我一步步走向了 Android 开发的正轨。感谢 FM 给我的一切，愿你的未来一帆风顺。</p>
<p>离职回到家后，由于身体的原因，我逼迫自己休息了一个星期，上午睡个懒觉，下午看看综艺节目，饭后出门散个步，晚上陪老妈扯会家常。让自己慢下来，不看技术文档与满屏的代码，享受与家人在一起的悠闲时光，我很珍惜，真的。</p>]]>
    
    </summary>
    
      <category term="Comeback" scheme="http://itangqi.me/tags/Comeback/"/>
    
      <category term="Diary" scheme="http://itangqi.me/tags/Diary/"/>
    
      <category term="Summary" scheme="http://itangqi.me/tags/Summary/"/>
    
      <category term="Life" scheme="http://itangqi.me/categories/Life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Tips - 填坑手册]]></title>
    <link href="http://itangqi.me/2015/09/14/android-tips/"/>
    <id>http://itangqi.me/2015/09/14/android-tips/</id>
    <published>2015-09-13T16:00:00.000Z</published>
    <updated>2016-02-25T05:44:26.000Z</updated>
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>学习 Android 至今，大大小小的坑没少踩，庆幸的是，在强大的搜索引擎与无私奉献的人们的帮助下，我遇到的坑都顺利地被填平了。</p>
<p>为了便于日后遇到同样的问题时，能免于再次搜索带来的麻烦，我养成了收藏书签的习惯，随着书签（Tips）的日积月累，我想，是时候该有这个项目了。</p>
<a id="more"></a> 
<p><strong>如果你是个 Android 新人，那么我希望这份列表，可以成为你踩到坑时的不完全手册。</strong></p>
<p>当然，这份列表一定会有遗漏，如果不幸，这里没有你所踩到的坑，或者对于某个问题你有更好的 Tips，欢迎分享，让我们一起来维护这个项目！你可以通过 <a href="https://github.com/tangqi92/Android-Tips/issues" target="_blank" rel="external">Commit</a> 或者 <a href="https://github.com/tangqi92/Android-Tips/pulls" target="_blank" rel="external">Pull requests</a> 的形式，当然也欢迎 <code>Star</code> 与 <code>Fork</code> :)</p>
<blockquote>
<p>由于本项目面向的群体为初学者，所以列表的知识点以初级为主，资源大多数为中文，如遇到少数无法访问的情况，请自备梯子。</p>
</blockquote>
<hr>
<h2 id="地址">地址</h2><p>项目地址：<a href="https://github.com/tangqi92/Android-Tips" target="_blank" rel="external">https://github.com/tangqi92/Android-Tips</a></p>
<hr>
<h2 id="期待与你成为朋友">期待与你成为朋友</h2><ul>
<li>Weibo: <a href="http://weibo.com/qiktang" target="_blank" rel="external">汤奇V</a>  </li>
<li>GitHub: <a href="https://github.com/tangqi92" target="_blank" rel="external">tangqi92</a></li>
<li>Blog: <a href="http://itangqi.me/">http://itangqi.me</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="介绍">介绍</h2><p>学习 Android 至今，大大小小的坑没少踩，庆幸的是，在强大的搜索引擎与无私奉献的人们的帮助下，我遇到的坑都顺利地被填平了。</p>
<p>为了便于日后遇到同样的问题时，能免于再次搜索带来的麻烦，我养成了收藏书签的习惯，随着书签（Tips）的日积月累，我想，是时候该有这个项目了。</p>]]>
    
    </summary>
    
      <category term="List" scheme="http://itangqi.me/tags/List/"/>
    
      <category term="Tips" scheme="http://itangqi.me/tags/Tips/"/>
    
      <category term="Android" scheme="http://itangqi.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[积木 - 享受搭建应用的乐趣]]></title>
    <link href="http://itangqi.me/2015/09/03/building-blocks/"/>
    <id>http://itangqi.me/2015/09/03/building-blocks/</id>
    <published>2015-09-02T16:00:00.000Z</published>
    <updated>2016-02-25T05:44:19.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><strong>积木</strong> - 一个以知乎日报作为数据展现内容；以抽屉菜单作为功能扩展入口；依循 Material Design 作为主导设计 UI 的应用；好吧，我承认这听上去就很酷！</p>
</blockquote>
<a id="more"></a> 
<hr>
<h2 id="How_to_use">How to use</h2><blockquote>
<p>dev 分支由 <a href="https://github.com/troyliu0105" target="_blank" rel="external">troyliu0105</a> 同学全力维护，他会不断对<strong>积木</strong>进行重构与增加好玩的功能，这非常酷，欢迎 <strong>Star</strong> 与 <strong>Fork</strong> 此分支！</p>
</blockquote>
<p>那么，你该如何利用「她」呢？</p>
<p>好啦，其实我已经帮你完成了应用整体框架的搭建，你需要做的，仅仅是依据自己的实际需求，简单的替换下数据来源，比如在 <a href="http://apistore.baidu.com/" target="_blank" rel="external">APIStore</a> 上就有详细的类别供你选择，然后再改改 UI，一款全新应用就完成啦！</p>
<p>想想，是不是还有点小激动？那么赶紧 <strong>Star</strong> 与 <strong>Fork</strong> 吧！你的支持将成为我最大的动力与褒奖！</p>
<hr>
<h2 id="Update_Log_-_更新日志">Update Log - 更新日志</h2><h3 id="0-7-0">0.7.0</h3><ul>
<li>新增 - 夜间模式</li>
<li>新增 - 程序崩溃日志收集</li>
<li>新增 - 自动更新</li>
<li>新增 - <code>html+</code>模式（其实就是修改了html标签==）</li>
<li>修复 - 自动清理功能的错误</li>
<li>修复 - 主界面刷新闪烁BUG</li>
<li>修改 - 部分UI</li>
</ul>
<h5 id="已知BUG">已知BUG</h5><ul>
<li>部分文章显示有问题(使用<code>html+</code>模式无影响)</li>
</ul>
<h3 id="v0-6-0">v0.6.0</h3><ul>
<li>新增 - FAB刷新</li>
<li>新增 - html模式下的页面缓存</li>
<li>新增 - json模式(速度更快，但部分文章显示有问题)</li>
<li>新增 - 自动清理过期缓存</li>
<li>新增 - SQLite数据储存</li>
<li>重构 - 使用MVP进行重构</li>
<li>新增 - 由<a href="http://weibo.com/cat93/" target="_blank" rel="external">Mao</a>提供的Logo</li>
<li>修改 - 部分的UI</li>
</ul>
<h3 id="v0-5-1">v0.5.1</h3><ul>
<li>修复 - 手势右划返回上级页面在4.4系统上的 Bug</li>
<li>优化 - 首页 Item 的展示布局</li>
</ul>
<h3 id="v0-5-0">v0.5.0</h3><ul>
<li>抛弃 - CardView，回归朴实并为 RecycerView 中 item 增加分割线</li>
<li>抛弃 - 第三方 DrawerLayout，华而不实</li>
<li>抛弃 - WebView 中显示文章标题，取而代之为分享按钮</li>
<li>新增 - 搜索功能，跳转页面显示结果</li>
<li>新增 - 手势右滑，返回上级页面功能</li>
<li>优化 - 将功能扩展作为抽屉菜单的子选项</li>
<li>重构 - 尽可能将代码写得优雅和规整</li>
</ul>
<hr>
<h2 id="Screenshots_-_预览">Screenshots - 预览</h2><p><strong>这里并不是最新效果预览，请前往 <a href="https://github.com/tangqi92/BuildingBlocks/blob/master/README.z.md" target="_blank" rel="external">GitHub</a> 查看</strong></p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/bb_s1.png" alt="screenshot" title="screenshot" width="270" height="486">  <img src="http://7xikfc.com1.z0.glb.clouddn.com/bb_s2.png" alt="screenshot" title="screenshot" width="270" height="486"></p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/bb_s3.png" alt="screenshot" title="screenshot" width="270" height="486">  <img src="http://7xikfc.com1.z0.glb.clouddn.com/bb_s4.png" alt="screenshot" title="screenshot" width="270" height="486"></p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/bb_s5.png" alt="screenshot" title="screenshot" width="270" height="486">  <img src="http://7xikfc.com1.z0.glb.clouddn.com/bb_s6.png" alt="screenshot" title="screenshot" width="270" height="486"></p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/bb_s7.png" alt="screenshot" title="screenshot" width="270" height="486">  <img src="http://7xikfc.com1.z0.glb.clouddn.com/bb_s8.png" alt="screenshot" title="screenshot" width="270" height="486"></p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/bb_s9.png" alt="screenshot" title="screenshot" width="270" height="486"></p>
<hr>
<h2 id="Dependencies_-_开源项目">Dependencies - 开源项目</h2><ul>
<li><a href="https://github.com/bumptech/glide" target="_blank" rel="external">glide</a></li>
<li><a href="https://github.com/orhanobut/logger" target="_blank" rel="external">logger</a></li>
<li><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">butterknife</a></li>
<li><a href="https://github.com/jdamcd/android-crop" target="_blank" rel="external">android-crop</a></li>
<li><a href="https://github.com/loopj/android-async-http" target="_blank" rel="external">android-async-http</a></li>
<li><a href="https://github.com/ikew0ng/SwipeBackLayout" target="_blank" rel="external">SwipeBackLayout</a></li>
</ul>
<hr>
<h2 id="Thanks_-_感谢你们">Thanks - 感谢你们</h2><ul>
<li><p>感谢 <a href="https://github.com/drakeet" target="_blank" rel="external">drakeet</a> 及他的 <a href="https://github.com/drakeet/Meizhi" target="_blank" rel="external">妹纸&amp;gank.io</a>， 其代码写得真的非常漂亮：)，从中学到了很多并运用到了项目中（依葫芦画瓢而已啦）</p>
</li>
<li><p>感谢 <a href="https://github.com/izzyleung" target="_blank" rel="external">Izzy Leung</a> 及他的 <a href="https://github.com/izzyleung/ZhihuDailyPurify" target="_blank" rel="external">知乎日报·净化</a>，项目最初的原型就来自于此，感谢其提供了详细的知乎日报 API 说明</p>
</li>
</ul>
<hr>
<h2 id="Contributors_-_贡献者">Contributors - 贡献者</h2><ul>
<li>dev version: <a href="https://github.com/troyliu0105" target="_blank" rel="external">troyliu0105</a></li>
<li>Logo: <a href="http://weibo.com/cat93/" target="_blank" rel="external">Mao</a> &amp; <a href="https://github.com/troyliu0105" target="_blank" rel="external">troyliu0105</a></li>
</ul>
<hr>
<h2 id="Demo_-_示例">Demo - 示例</h2><p><a href="http://7xk54v.com1.z0.glb.clouddn.com/app/bb/0.7.0.apk" target="_blank" rel="external">快速下载</a></p>
<hr>
<h2 id="Source_code_-_源码">Source code - 源码</h2><p>源代码：<a href="https://github.com/tangqi92/BuildingBlocks" target="_blank" rel="external">https://github.com/tangqi92/BuildingBlocks</a></p>
<hr>
<h2 id="Contact_-_联系我">Contact - 联系我</h2><ul>
<li>Weibo：<a href="http://weibo.com/qiktang" target="_blank" rel="external">汤奇V</a></li>
<li>Blog: <a href="http://itangqi.me">http://itangqi.me</a></li>
<li>Gmail：<a href="mailto:imtangqi@gmail.com" title="欢迎与我联系" target="_blank" rel="external">imtangqi#gmail.com</a></li>
</ul>
<hr>
<p>最后更新时间：2015-10-07 19:47</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><strong>积木</strong> - 一个以知乎日报作为数据展现内容；以抽屉菜单作为功能扩展入口；依循 Material Design 作为主导设计 UI 的应用；好吧，我承认这听上去就很酷！</p>
</blockquote>]]>
    
    </summary>
    
      <category term="AOSP" scheme="http://itangqi.me/tags/AOSP/"/>
    
      <category term="Framework" scheme="http://itangqi.me/tags/Framework/"/>
    
      <category term="Android" scheme="http://itangqi.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google Places for Android 入门指南]]></title>
    <link href="http://itangqi.me/2015/08/09/google-places-for-android-guide/"/>
    <id>http://itangqi.me/2015/08/09/google-places-for-android-guide/</id>
    <published>2015-08-08T16:00:00.000Z</published>
    <updated>2016-02-25T05:43:31.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近由于项目的原因，接触到了 <a href="https://developers.google.com/places/" target="_blank" rel="external">Google Places</a> 的使用与开发，学习并在项目中实现了简单的<strong>地点定位</strong>与<strong>自动补全</strong>功能。</p>
<p>在整个实践过程中，发现除了官方文档外，网上可以参考的中文教程寥寥无几且质量都不高，遂决定自己写篇入门指南（其实也没多少干货啦），希望可以帮助到，有这方面需求的同学们。下面，我将以一个实际的例子，图文并茂的带着你快速了解并使用上 Google Places .</p>
<a id="more"></a> 
<hr>
<h2 id="在_Google_Developers_Console_中创建_API_项目">在 Google Developers Console 中创建 API 项目</h2><p>如果你之前从未在应用中使用过 Google 提供的相关服务（API），那么请直接使用系统引导帮你完成整个流程并自动激活 Google Places API for Android ，请点击<a href="https://console.developers.google.com/flows/enableapi?apiid=placesandroid&amp;keyType=CLIENT_SIDE_ANDROID" target="_blank" rel="external">此链接</a>，按下面截图所示进行操作，便可轻松完成创建。  </p>
<ol>
<li>选择「Create a new project」<br><img src="http://7xikfc.com1.z0.glb.clouddn.com/google-places-api-01.png" alt=""></li>
<li>选择「Go to Credentials」<br><img src="http://7xikfc.com1.z0.glb.clouddn.com/google-places-api-02.png" alt=""></li>
<li>此处直接选择「Create」，既默认所有应用均可使用同样的「API key」<br><img src="http://7xikfc.com1.z0.glb.clouddn.com/google-places-api-03.png" alt=""></li>
<li>好啦，此时主角「API key」便自动生成了<br><img src="http://7xikfc.com1.z0.glb.clouddn.com/google-places-api-04.png" alt=""></li>
</ol>
<hr>
<h2 id="配置你的应用">配置你的应用</h2><p>使用 Google Places API for Android 的所有应用均需执行以下配置步骤。</p>
<h3 id="添加_Google_Play_服务">添加 Google Play 服务</h3><p>要访问 Google Places API for Android，应用的开发项目必须包含 Google Play 服务。通过 SDK 管理器下载并安装 Google Play 服务组件，然后将库添加至您的项目。  </p>
<p>-buidl.gradle (app)<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.google.android.gms:play-services:7.5.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </p>
<h3 id="添加相应权限">添加相应权限</h3><p>-AndroidManifest.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- PlacePicker requires the ACCESS_FINE_LOCATION permission and a geo API key.--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.ACCESS_FINE_LOCATION"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.ACCESS_COARSE_LOCATION"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- PlacePicker also requires OpenGL ES version 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-feature</span></span><br><span class="line">true<span class="attribute">android:glEsVersion</span>=<span class="value">"0x00020000"</span></span><br><span class="line">   	<span class="attribute">android:required</span>=<span class="value">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure>   </p>
<h3 id="添加_API_密钥">添加 API 密钥</h3><p>请按照以下代码示例所示，将你的 API 密钥添加至 Manifest ，并将 <strong>API_KEY</strong> 替换为您自己的 API 密钥：  </p>
<p>-AndroidManifest.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="type">application</span>&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;meta-data</span><br><span class="line">            android:<span class="property">name</span>=<span class="string">"com.google.android.gms.version"</span></span><br><span class="line">            android:value=<span class="string">"@integer/google_play_services_version"</span> /&gt;</span><br><span class="line">            </span><br><span class="line">  &lt;meta-data</span><br><span class="line">      android:<span class="property">name</span>=<span class="string">"com.google.android.geo.API_KEY"</span></span><br><span class="line">      android:value=<span class="string">"API_KEY"</span>/&gt;</span><br><span class="line">&lt;/<span class="type">application</span>&gt;</span><br></pre></td></tr></table></figure>  </p>
<hr>
<h2 id="当前地点">当前地点</h2><h3 id="获取当前位置">获取当前位置</h3><p>要查找本地商家或设备的最后已知所在地点，请调用 <code>PlaceDetectionApi.getCurrentPlace()</code>。</p>
<p>您可以选择指定一个 <code>PlaceFilter</code>，以将结果限制为一个或多个地点 ID（最多 10 个），或者仅选择当前打开的地点。如果未指定筛选器，则不会筛选结果。</p>
<p>API 会在 <code>PendingResult</code> 中返回 <code>PlaceLikelihoodBuffer</code>。<code>PlaceLikelihoodBuffer</code> 包含表示类似地点的 <code>PlaceLikelihood</code> 对象列表。对于每个地点，结果中都包含指示地点是正确地点的可能性信息。如果没有与筛选条件对应的已知地点，缓冲区可能为空。  </p>
<p>您可以调用 <code>PlaceLikelihood.getPlace()</code> 来检索 <code>Place</code> 对象，调用 <code>PlaceLikelihood.getLikelihood()</code> 来获取地点的可能性评分。值越高，表示该地点是最佳匹配项的可能性越大。</p>
<h3 id="地点自动完成">地点自动完成</h3><p>要获取预测地点名称和/或地址的列表，请调用 <code>GeoDataApi.getAutocompletePredictions()</code>，传递以下参数：  </p>
<ul>
<li>必填：<code>query</code> 字符串包含用户键入的文本。</li>
<li>必填：<code>LatLngBounds</code> 对象，将结果限制为通过纬度和经度边界指定的特定区域。</li>
<li>可选：<code>AutocompleteFilter</code>，包含一组地点类型，您可以使用它们将结果限制为一种或多种地点类型，如商店、学校、邮局等。有关可用地点类型的列表，请参见<a href="https://developers.google.com/places/supported_types#table3" target="_blank" rel="external">支持的类型</a>列表。</li>
</ul>
<p>API 会在 <code>PendingResult</code> 中返回 <code>AutocompletePredictionBuffer</code>。<code>AutocompletePredictionBuffer</code> 包含表示预测地点的 <code>AutocompletePrediction</code> 对象列表。如果没有与查询和筛选条件对应的已知地点，缓冲区可能为空。</p>
<p>对于每个预测地点，都可以调用以下方法来检索地点详情：</p>
<ul>
<li><code>getDescription()</code> – 返回地点说明。</li>
<li><code>getMatchedSubstrings()</code> – 通过与此地点匹配的 query 返回子字符串列表。例如，您可以使用这些子字符串突出显示用户查询中的匹配文本。</li>
<li><code>getDescription()</code> – 返回预测地点的地点 ID。地点 ID 是唯一标识地点的文本标识符。有关地点 ID 的详细信息，请参阅<a href="https://developers.google.com/places/place-id" target="_blank" rel="external">地点 ID 概览</a>。</li>
<li>`getPlaceTypes() – 返回与此地点关联的地点类型列表。</li>
</ul>
<hr>
<h2 id="具体实现">具体实现</h2><p><img src="http://7xikfc.com1.z0.glb.clouddn.com/google-places-api-layout.png" alt="screenshot" title="screenshot" width="350" height="622">  </p>
<p>-activity_main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_margin</span>=<span class="value">"@dimen/margin_16dp"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="title">AutoCompleteTextView</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/autocomplete_places"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"center_horizontal"</span></span><br><span class="line">        <span class="attribute">android:hint</span>=<span class="value">"@string/autocomplete_hint"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:orientation</span>=<span class="value">"horizontal"</span></span><br><span class="line">        <span class="attribute">android:paddingTop</span>=<span class="value">"@dimen/margin_8dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/ll_current_location"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_gravity</span>=<span class="value">"center_vertical"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"@string/get_current_place"</span></span><br><span class="line">            <span class="attribute">android:textAppearance</span>=<span class="value">"?android:attr/textAppearanceSmall"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">ImageView</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"right"</span></span><br><span class="line">        <span class="attribute">android:src</span>=<span class="value">"@drawable/powered_by_google_light"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"@string/selected_place"</span></span><br><span class="line">        <span class="attribute">android:textAppearance</span>=<span class="value">"?android:attr/textAppearanceMedium"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/place_details"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:autoLink</span>=<span class="value">"all"</span></span><br><span class="line">        <span class="attribute">android:paddingTop</span>=<span class="value">"@dimen/margin_8dp"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">""</span></span><br><span class="line">        <span class="attribute">android:textAppearance</span>=<span class="value">"?android:attr/textAppearanceMedium"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/place_attribution"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:autoLink</span>=<span class="value">"all"</span></span><br><span class="line">        <span class="attribute">android:paddingTop</span>=<span class="value">"@dimen/margin_16dp"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">""</span></span><br><span class="line">        <span class="attribute">android:textAppearance</span>=<span class="value">"?android:attr/textAppearanceSmall"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>  </p>
<p>-PlaceAutocompleteAdapter.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlaceAutocompleteAdapter</span></span><br><span class="line">        <span class="keyword">extends</span> <span class="title">ArrayAdapter</span>&lt;<span class="title">PlaceAutocompleteAdapter</span>.<span class="title">PlaceAutocomplete</span>&gt; <span class="keyword">implements</span> <span class="title">Filterable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"PlaceAutocompleteAdapter"</span>;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Current results returned by this adapter.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;PlaceAutocomplete&gt; mResultList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Handles autocomplete requests.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> GoogleApiClient mGoogleApiClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The bounds used for Places Geo Data autocomplete API requests.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> LatLngBounds mBounds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The autocomplete filter used to restrict queries to a specific set of place types.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> AutocompleteFilter mPlaceFilter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Initializes with a resource for text rows and autocomplete query bounds.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@see</span> ArrayAdapter#ArrayAdapter(Context, int)</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlaceAutocompleteAdapter</span><span class="params">(Context context, <span class="keyword">int</span> resource, GoogleApiClient googleApiClient,</span><br><span class="line">                                    LatLngBounds bounds, AutocompleteFilter filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, resource);</span><br><span class="line">        mGoogleApiClient = googleApiClient;</span><br><span class="line">        mBounds = bounds;</span><br><span class="line">        mPlaceFilter = filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Sets the bounds for all subsequent queries.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setBounds</span><span class="params">(LatLngBounds bounds)</span> </span>&#123;</span><br><span class="line">        mBounds = bounds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Returns the number of results received in the last autocomplete query.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mResultList.<span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Returns an item from the last autocomplete query.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">PlaceAutocomplete <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mResultList.<span class="title">get</span><span class="params">(position)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Returns the filter for the current set of autocomplete results.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Filter <span class="title">getFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Filter filter = <span class="keyword">new</span> Filter() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="function">FilterResults <span class="title">performFiltering</span><span class="params">(CharSequence constraint)</span> </span>&#123;</span><br><span class="line">                FilterResults results = <span class="keyword">new</span> FilterResults();</span><br><span class="line">                <span class="comment">// Skip the autocomplete query if no constraints are given.</span></span><br><span class="line">                <span class="keyword">if</span> (constraint != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// Query the autocomplete API for the (constraint) search string.</span></span><br><span class="line">                    mResultList = getAutocomplete(constraint);</span><br><span class="line">                    <span class="keyword">if</span> (mResultList != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// The API successfully returned results.</span></span><br><span class="line">                        results.values = mResultList;</span><br><span class="line">                        results.count = mResultList.size();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> results;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">publishResults</span><span class="params">(CharSequence constraint, FilterResults results)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (results != <span class="keyword">null</span> &amp;&amp; results.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// The API returned at least one result, update the data.</span></span><br><span class="line">                    notifyDataSetChanged();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// The API did not return any results, invalidate the data set.</span></span><br><span class="line">                    notifyDataSetInvalidated();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;PlaceAutocomplete&gt; getAutocomplete(CharSequence constraint) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mGoogleApiClient.isConnected()) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"Starting autocomplete query for: "</span> + constraint);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Submit the query to the autocomplete API and retrieve a PendingResult that will</span></span><br><span class="line">            <span class="comment">// contain the results when the query completes.</span></span><br><span class="line">            PendingResult&lt;AutocompletePredictionBuffer&gt; results =</span><br><span class="line">                    Places.GeoDataApi</span><br><span class="line">                            .getAutocompletePredictions(mGoogleApiClient, constraint.toString(),</span><br><span class="line">                                    mBounds, mPlaceFilter);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// This method should have been called off the main UI thread. Block and wait for at most 60s</span></span><br><span class="line">            <span class="comment">// for a result from the API.</span></span><br><span class="line">            AutocompletePredictionBuffer autocompletePredictions = results</span><br><span class="line">                    .await(<span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Confirm that the query completed successfully, otherwise return null</span></span><br><span class="line">            <span class="keyword">final</span> Status status = autocompletePredictions.getStatus();</span><br><span class="line">            <span class="keyword">if</span> (!status.isSuccess()) &#123;</span><br><span class="line">                Toast.makeText(getContext(), <span class="string">"Error contacting API: "</span> + status.toString(),</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line">                Log.e(TAG, <span class="string">"Error getting autocomplete prediction API call: "</span> + status.toString());</span><br><span class="line">                autocompletePredictions.release();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Log.i(TAG, <span class="string">"Query completed. Received "</span> + autocompletePredictions.getCount()</span><br><span class="line">                    + <span class="string">" predictions."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Copy the results into our own data structure, because we can't hold onto the buffer.</span></span><br><span class="line">            <span class="comment">// AutocompletePrediction objects encapsulate the API response (place ID and description).</span></span><br><span class="line"></span><br><span class="line">            Iterator&lt;AutocompletePrediction&gt; iterator = autocompletePredictions.iterator();</span><br><span class="line">            ArrayList resultList = <span class="keyword">new</span> ArrayList&lt;&gt;(autocompletePredictions.getCount());</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                AutocompletePrediction prediction = iterator.next();</span><br><span class="line">                <span class="comment">// Get the details of this prediction and copy it into a new PlaceAutocomplete object.</span></span><br><span class="line">                resultList.add(<span class="keyword">new</span> PlaceAutocomplete(prediction.getPlaceId(),</span><br><span class="line">                        prediction.getDescription()));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Release the buffer now that all data has been copied.</span></span><br><span class="line">            autocompletePredictions.release();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> resultList;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.e(TAG, <span class="string">"Google API client is not connected for autocomplete query."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Holder for Places Geo Data Autocomplete API results.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PlaceAutocomplete</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> CharSequence placeId;</span><br><span class="line">        <span class="keyword">public</span> CharSequence description;</span><br><span class="line"></span><br><span class="line">        PlaceAutocomplete(CharSequence placeId, CharSequence description) &#123;</span><br><span class="line">            <span class="keyword">this</span>.placeId = placeId;</span><br><span class="line">            <span class="keyword">this</span>.description = description;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function">String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">return</span> description.<span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </p>
<p>-MainActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title">GoogleApiClient</span>.<span class="title">OnConnectionFailedListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * GoogleApiClient wraps our service connection to Google Play Services and provides access</span><br><span class="line">     * to the user's sign in state as well as the Google's APIs.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GOOGLE_API_CLIENT_ID = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> GoogleApiClient mGoogleApiClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PlaceAutocompleteAdapter mAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AutoCompleteTextView mAutocompleteView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView mPlaceDetailsText;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView mPlaceDetailsAttribution;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button mCurrentLocation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LatLngBounds BOUNDS_GREATER_SYDNEY = <span class="keyword">new</span> LatLngBounds(</span><br><span class="line">            <span class="keyword">new</span> LatLng(-<span class="number">34.041458</span>, <span class="number">150.790100</span>), <span class="keyword">new</span> LatLng(-<span class="number">33.682247</span>, <span class="number">151.383362</span>));</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Construct a GoogleApiClient for the &#123;@link Places#GEO_DATA_API&#125; using AutoManage</span></span><br><span class="line">        <span class="comment">// functionality, which automatically sets up the API client to handle Activity lifecycle</span></span><br><span class="line">        <span class="comment">// events. If your activity does not extend FragmentActivity, make sure to call connect()</span></span><br><span class="line">        <span class="comment">// and disconnect() explicitly.</span></span><br><span class="line">        mGoogleApiClient = <span class="keyword">new</span> GoogleApiClient.Builder(<span class="keyword">this</span>)</span><br><span class="line">                .enableAutoManage(<span class="keyword">this</span>, GOOGLE_API_CLIENT_ID <span class="comment">/* clientId */</span>, <span class="keyword">this</span>)</span><br><span class="line">                .addApi(Places.GEO_DATA_API)</span><br><span class="line">                .addApi(Places.PLACE_DETECTION_API)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Retrieve the AutoCompleteTextView that will display Place suggestions.</span></span><br><span class="line">        mAutocompleteView = (AutoCompleteTextView)</span><br><span class="line">                findViewById(R.id.autocomplete_places);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register a listener that receives callbacks when a suggestion has been selected</span></span><br><span class="line">        mAutocompleteView.setOnItemClickListener(mAutocompleteClickListener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Retrieve the TextViews that will display details and attributions of the selected place.</span></span><br><span class="line">        mPlaceDetailsText = (TextView) findViewById(R.id.place_details);</span><br><span class="line">        mPlaceDetailsAttribution = (TextView) findViewById(R.id.place_attribution);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// CurrentLocation</span></span><br><span class="line">        mCurrentLocation = (Button) findViewById(R.id.ll_current_location);</span><br><span class="line">        mCurrentLocation.setOnClickListener(mOnClickListener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set up the adapter that will retrieve suggestions from the Places Geo Data API that cover</span></span><br><span class="line">        <span class="comment">// the entire world.</span></span><br><span class="line">        mAdapter = <span class="keyword">new</span> PlaceAutocompleteAdapter(<span class="keyword">this</span>, android.R.layout.simple_list_item_1,</span><br><span class="line">                mGoogleApiClient, BOUNDS_GREATER_SYDNEY, <span class="keyword">null</span>);</span><br><span class="line">        mAutocompleteView.setAdapter(mAdapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> View.OnClickListener mOnClickListener = <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            PendingResult&lt;PlaceLikelihoodBuffer&gt; result = Places.PlaceDetectionApi</span><br><span class="line">                    .getCurrentPlace(mGoogleApiClient, <span class="keyword">null</span>);</span><br><span class="line">            result.setResultCallback(<span class="keyword">new</span> ResultCallback&lt;PlaceLikelihoodBuffer&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResult</span><span class="params">(PlaceLikelihoodBuffer likelyPlaces)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!likelyPlaces.getStatus().isSuccess()) &#123;</span><br><span class="line">                        <span class="comment">// Request did not complete successfully</span></span><br><span class="line">                        Log.e(TAG, <span class="string">"Place query did not complete. Error: "</span> + likelyPlaces.getStatus().toString());</span><br><span class="line">                        likelyPlaces.release();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    String placeName = String.format(<span class="string">"%s"</span>, likelyPlaces.get(<span class="number">0</span>).getPlace().getName());</span><br><span class="line">                    String placeAttributuion = String.format(<span class="string">"%s"</span>, likelyPlaces.get(<span class="number">0</span>).getPlace().getAddress());</span><br><span class="line">                    mPlaceDetailsText.setText(placeName);</span><br><span class="line">                    mPlaceDetailsAttribution.setText(placeAttributuion);</span><br><span class="line">                    likelyPlaces.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Listener that handles selections from suggestions from the AutoCompleteTextView that</span><br><span class="line">     * displays Place suggestions.</span><br><span class="line">     * Gets the place id of the selected item and issues a request to the Places Geo Data API</span><br><span class="line">     * to retrieve more details about the place.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@see</span> com.google.android.gms.location.places.GeoDataApi#getPlaceById(com.google.android.gms.common.api.GoogleApiClient,</span><br><span class="line">     * String...)</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> AdapterView.OnItemClickListener mAutocompleteClickListener</span><br><span class="line">            = <span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">            <span class="comment">/*</span><br><span class="line">             Retrieve the place ID of the selected item from the Adapter.</span><br><span class="line">             The adapter stores each Place suggestion in a PlaceAutocomplete object from which we</span><br><span class="line">             read the place ID.</span><br><span class="line">              */</span></span><br><span class="line">            <span class="keyword">final</span> PlaceAutocompleteAdapter.PlaceAutocomplete item = mAdapter.getItem(position);</span><br><span class="line">            <span class="keyword">final</span> String placeId = String.valueOf(item.placeId);</span><br><span class="line">            Log.i(TAG, <span class="string">"Autocomplete item selected: "</span> + item.description);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span><br><span class="line">             Issue a request to the Places Geo Data API to retrieve a Place object with additional</span><br><span class="line">              details about the place.</span><br><span class="line">              */</span></span><br><span class="line">            PendingResult&lt;PlaceBuffer&gt; placeResult = Places.GeoDataApi</span><br><span class="line">                    .getPlaceById(mGoogleApiClient, placeId);</span><br><span class="line">            placeResult.setResultCallback(mUpdatePlaceDetailsCallback);</span><br><span class="line">            Log.i(TAG, <span class="string">"Called getPlaceById to get Place details for "</span> + item.placeId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Callback for results from a Places Geo Data API query that shows the first place result in</span><br><span class="line">     * the details view on screen.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> ResultCallback&lt;PlaceBuffer&gt; mUpdatePlaceDetailsCallback</span><br><span class="line">            = <span class="keyword">new</span> ResultCallback&lt;PlaceBuffer&gt;() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResult</span><span class="params">(PlaceBuffer places)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!places.getStatus().isSuccess()) &#123;</span><br><span class="line">                <span class="comment">// Request did not complete successfully</span></span><br><span class="line">                Log.e(TAG, <span class="string">"Place query did not complete. Error: "</span> + places.getStatus().toString());</span><br><span class="line">                places.release();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Get the Place object from the buffer.</span></span><br><span class="line">            <span class="keyword">final</span> Place place = places.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Format details of the place for display and show it in a TextView.</span></span><br><span class="line">            mPlaceDetailsText.setText(formatPlaceDetails(getResources(), place.getName(),</span><br><span class="line">                    place.getId(), place.getAddress(), place.getPhoneNumber(),</span><br><span class="line">                    place.getWebsiteUri()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Display the third party attributions if set.</span></span><br><span class="line">            <span class="keyword">final</span> CharSequence thirdPartyAttribution = places.getAttributions();</span><br><span class="line">            <span class="keyword">if</span> (thirdPartyAttribution == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mPlaceDetailsAttribution.setVisibility(View.GONE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mPlaceDetailsAttribution.setVisibility(View.VISIBLE);</span><br><span class="line">                mPlaceDetailsAttribution.setText(Html.fromHtml(thirdPartyAttribution.toString()));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Log.i(TAG, <span class="string">"Place details received: "</span> + place.getName());</span><br><span class="line"></span><br><span class="line">            places.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Spanned <span class="title">formatPlaceDetails</span><span class="params">(Resources res, CharSequence name, String id,</span><br><span class="line">                                              CharSequence address, CharSequence phoneNumber, Uri websiteUri)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, res.getString(R.string.place_details, name, id, address, phoneNumber,</span><br><span class="line">                websiteUri));</span><br><span class="line">        <span class="keyword">return</span> Html.fromHtml(res.getString(R.string.place_details, name, id, address, phoneNumber,</span><br><span class="line">                websiteUri));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Called when the Activity could not connect to Google Play services and the auto manager</span><br><span class="line">     * could resolve the error automatically.</span><br><span class="line">     * In this case the API is not available and notify the user.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> connectionResult can be inspected to determine the cause of the failure</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnectionFailed</span><span class="params">(ConnectionResult connectionResult)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Log.e(TAG, <span class="string">"onConnectionFailed: ConnectionResult.getErrorCode() = "</span></span><br><span class="line">                + connectionResult.getErrorCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO(Developer): Check error code and notify the user of error state and resolution.</span></span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>,</span><br><span class="line">                <span class="string">"Could not connect to Google API Client: Error "</span> + connectionResult.getErrorCode(),</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">        MainActivity.<span class="keyword">this</span>.finish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/google-places-api-sc-01.png" alt="screenshot" title="screenshot" width="350" height="622"> <img src="http://7xikfc.com1.z0.glb.clouddn.com/google-places-api-sc-02.png" alt="screenshot" title="screenshot" width="350" height="622">    </p>
<hr>
<h2 id="最后">最后</h2><ul>
<li>Demo 下载链接：<a href="https://github.com/tangqi92/MyGooglePlaces" target="_blank" rel="external">https://github.com/tangqi92/MyGooglePlaces</a></li>
<li>友情提醒：以上的功能，手机需要安装 <a href="https://developers.google.com/android/guides/overview" target="_blank" rel="external">Google Play services</a> 才能正常使用，至于如何安装，就交给万能的 Google 吧：）</li>
<li>如本文存在任何错误或遗漏，欢迎指正。</li>
</ul>
<hr>
<h2 id="References">References</h2><ul>
<li><a href="https://developers.google.com/places/android/" target="_blank" rel="external">https://developers.google.com/places/android</a></li>
<li><a href="https://github.com/googlesamples/android-play-places" target="_blank" rel="external">https://github.com/googlesamples/android-play-places</a></li>
</ul>
<hr>
<h2 id="期待与你成为朋友">期待与你成为朋友</h2><ul>
<li>Weibo: <a href="http://weibo.com/qiktang" target="_blank" rel="external">汤奇V</a>  </li>
<li>GitHub: <a href="https://github.com/tangqi92" target="_blank" rel="external">tangqi92</a></li>
<li>Blog: <a href="http://itangqi.me/">http://itangqi.me</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>最近由于项目的原因，接触到了 <a href="https://developers.google.com/places/">Google Places</a> 的使用与开发，学习并在项目中实现了简单的<strong>地点定位</strong>与<strong>自动补全</strong>功能。</p>
<p>在整个实践过程中，发现除了官方文档外，网上可以参考的中文教程寥寥无几且质量都不高，遂决定自己写篇入门指南（其实也没多少干货啦），希望可以帮助到，有这方面需求的同学们。下面，我将以一个实际的例子，图文并茂的带着你快速了解并使用上 Google Places .</p>]]>
    
    </summary>
    
      <category term="Google Places" scheme="http://itangqi.me/tags/Google-Places/"/>
    
      <category term="Location" scheme="http://itangqi.me/tags/Location/"/>
    
      <category term="Android" scheme="http://itangqi.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ORM 框架之 greenDAO 使用心得]]></title>
    <link href="http://itangqi.me/2015/07/26/orm-greendao-summary/"/>
    <id>http://itangqi.me/2015/07/26/orm-greendao-summary/</id>
    <published>2015-07-25T16:00:00.000Z</published>
    <updated>2016-02-25T05:42:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>我相信，在平时的开发过程中，大家一定会或多或少地接触到 <a href="https://en.wikipedia.org/wiki/SQLite" target="_blank" rel="external">SQLite</a>。然而在使用它时，我们往往需要做许多额外的工作，像编写 SQL 语句与解析查询结果等。所以，适用于 Android 的 <strong>ORM</strong> 框架也就孕育而生了，现在市面上主流的框架有 OrmLite、SugarORM、Active Android、Realm 与 GreenDAO。而今天的主角便是 <strong>greenDAO</strong>，下面，我将详解地介绍如何在 <strong>Android Studio</strong> 上使用 <strong>greenDAO</strong>，并结合代码总结一些使用过程中的心得。</p>
<a id="more"></a> 
<hr>
<h2 id="关于_greenDAO">关于 greenDAO</h2><p><img src="http://7xikfc.com1.z0.glb.clouddn.com/greenDAO-orm-640.png" alt=""> </p>
<p>简单的讲，greenDAO 是一个将对象映射到 SQLite 数据库中的轻量且快速的 ORM 解决方案。（greenDAO is a light &amp; fast ORM solution that maps objects to SQLite databases.）<br>而关于 ORM （Object Relation Mapping - 对象关系映射）的概念，可参见 <a href="https://en.wikipedia.org/wiki/Object-relational_mapping" target="_blank" rel="external">Wikipedia</a>。</p>
<h3 id="greenDAO_设计的主要目标">greenDAO 设计的主要目标</h3><ul>
<li>一个精简的库    </li>
<li>性能最大化</li>
<li>内存开销最小化</li>
<li>易于使用的 APIs  </li>
<li>对 Android 进行高度优化    </li>
</ul>
<h3 id="greenDAO_设计的主要特点">greenDAO 设计的主要特点</h3><ul>
<li>greenDAO 性能远远高于同类的 <a href="http://ormlite.com/" target="_blank" rel="external">ORMLite</a>，具体测试结果可见<a href="http://greendao-orm.com/features/" target="_blank" rel="external">官网</a></li>
<li>greenDAO 支持 <a href="https://github.com/google/protobuf" target="_blank" rel="external">protocol buffer(protobuf)</a> 协议数据的直接存储，如果你通过 protobuf 协议与服务器交互，将不需要任何的映射。</li>
<li>与 ORMLite 等使用<strong>注解</strong>方式的 ORM 框架不同，greenDAO 使用「Code generation」的方式，这也是其性能能大幅提升的原因。  </li>
</ul>
<h3 id="DAO_Code_Generation_Project">DAO Code Generation Project</h3><p><img src="http://7xikfc.com1.z0.glb.clouddn.com/greenDAO-Projects-640.png" alt=""></p>
<p>这是其核心概念：为了在我们的 Android 工程中使用 greenDAO ，我们需要另建一个纯 Java Project，用于自动生成后继 Android 工程中需要使用到的 Bean、DAO、DaoMaster、DaoSession 等类。</p>
<h3 id="Core_Classes_&amp;_Modelling_entities">Core Classes &amp; Modelling entities</h3><p><img src="http://7xikfc.com1.z0.glb.clouddn.com/Core-Classes-150.png" alt=""><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/Meta-Model-180.png" alt=""></p>
<p>关于以上几个类的相关概念与作用，我将在下面的代码（注释）中详细讲解。<br>当然，你也可以在 <a href="http://greendao-orm.com/documentation/introduction/" target="_blank" rel="external">官网</a> 中找到相关介绍。</p>
<hr>
<h2 id="让我们开始吧">让我们开始吧</h2><h3 id="一-_在_Android_工程中配置「greenDao_Generator」模块">一. 在 Android 工程中配置「greenDao Generator」模块</h3><ol>
<li><p>在 .src/main 目录下新建一个与 java 同层级的「java-gen」目录，用于存放由 greenDAO 生成的 Bean、DAO、DaoMaster、DaoSession 等类。<br><img src="http://7xikfc.com1.z0.glb.clouddn.com/gd_new_java_gen.png" alt=""><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/gd_main_javagen_name.png" alt=""> </p>
</li>
<li><p>配置 Android 工程（app）的 build.gradle，如图分别添加 <a href="https://docs.gradle.org/current/dsl/org.gradle.api.tasks.SourceSet.html" target="_blank" rel="external">sourceSets</a> 与 <a href="https://docs.gradle.org/1.8-rc-1/userguide/dependency_management.html" target="_blank" rel="external">dependencies</a>。<br><img src="http://7xikfc.com1.z0.glb.clouddn.com/gd_main_gradlee.png" alt=""></p>
</li>
</ol>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">sourceSets </span><span class="expression">&#123;</span><br><span class="line">        <span class="variable">main</span> &#123;</span><br><span class="line">            <span class="variable">java.srcDirs</span> = ['<span class="variable">src</span><span class="end-block">/main</span><span class="end-block">/java</span>', '<span class="variable">src</span><span class="end-block">/main</span><span class="end-block">/java-gen</span>']</span><br><span class="line">        &#125;</span><span class="xml"></span><br><span class="line">    &#125;</span></span><br></pre></td></tr></table></figure>  
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'de.greenrobot:greendao:1.3.7'</span></span><br></pre></td></tr></table></figure>
<h3 id="二-_新建「greenDAO_Generator」模块_(纯_Java_工程）">二. 新建「greenDAO Generator」模块 (纯 Java 工程）</h3><ol>
<li><p>通过 File -&gt; New -&gt; New Module -&gt; Java Library -&gt; 填写相应的包名与类名 -&gt; Finish.<br><img src="http://7xikfc.com1.z0.glb.clouddn.com/gd_new_javamodule.png" alt=""><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/gd_main_new_java_library.png" alt=""><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/gd_customize_activity2.png" alt=""></p>
</li>
<li><p>配置 daoexamplegenerator 工程的 build.gradle，添加 dependencies.<br><img src="http://7xikfc.com1.z0.glb.clouddn.com/gd_generator_gradlee.png" alt="">    </p>
</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'de.greenrobot:greendao-generator:1.3.1'</span></span><br></pre></td></tr></table></figure>
<ol>
<li>编写 <strong>ExampleDaoGenerator</strong> 类，<strong>注意</strong>： 我们的 Java 工程只有一个类，它的内容决定了「GreenDao Generator」的输出，你可以在这个类中通过对象、关系等创建数据库结构，下面我将以<strong>注释</strong>的形式详细讲解代码内容。  </li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleDaoGenerator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 正如你所见的，你创建了一个用于添加实体（Entity）的模式（Schema）对象。</span></span><br><span class="line">        <span class="comment">// 两个参数分别代表：数据库版本号与自动生成代码的包路径。</span></span><br><span class="line">        Schema schema = <span class="keyword">new</span> Schema(<span class="number">1</span>, <span class="string">"me.itangqi.greendao"</span>);</span><br><span class="line"><span class="comment">//      当然，如果你愿意，你也可以分别指定生成的 Bean 与 DAO 类所在的目录，只要如下所示：</span></span><br><span class="line"><span class="comment">//      Schema schema = new Schema(1, "me.itangqi.bean");</span></span><br><span class="line"><span class="comment">//      schema.setDefaultJavaPackageDao("me.itangqi.dao");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模式（Schema）同时也拥有两个默认的 flags，分别用来标示 entity 是否是 activie 以及是否使用 keep sections。</span></span><br><span class="line">        <span class="comment">// schema2.enableActiveEntitiesByDefault();</span></span><br><span class="line">        <span class="comment">// schema2.enableKeepSectionsByDefault();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一旦你拥有了一个 Schema 对象后，你便可以使用它添加实体（Entities）了。</span></span><br><span class="line">        addNote(schema);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后我们将使用 DAOGenerator 类的 generateAll() 方法自动生成代码，此处你需要根据自己的情况更改输出目录（既之前创建的 java-gen)。</span></span><br><span class="line">        <span class="comment">// 其实，输出目录的路径可以在 build.gradle 中设置，有兴趣的朋友可以自行搜索，这里就不再详解。</span></span><br><span class="line">        <span class="keyword">new</span> DaoGenerator().generateAll(schema, <span class="string">"/Users/tangqi/android-dev/AndroidStudioProjects/MyGreenDAO/app/src/main/java-gen"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> schema</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addNote</span><span class="params">(Schema schema)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 一个实体（类）就关联到数据库中的一张表，此处表名为「Note」（既类名）</span></span><br><span class="line">        Entity note = schema.addEntity(<span class="string">"Note"</span>);</span><br><span class="line">        <span class="comment">// 你也可以重新给表命名</span></span><br><span class="line">        <span class="comment">// note.setTableName("NODE");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// greenDAO 会自动根据实体类的属性值来创建表字段，并赋予默认值</span></span><br><span class="line">        <span class="comment">// 接下来你便可以设置表中的字段：</span></span><br><span class="line">        note.addIdProperty();</span><br><span class="line">        note.addStringProperty(<span class="string">"text"</span>).notNull();</span><br><span class="line">        <span class="comment">// 与在 Java 中使用驼峰命名法不同，默认数据库中的命名是使用大写和下划线来分割单词的。</span></span><br><span class="line">        <span class="comment">// For example, a property called “creationDate” will become a database column “CREATION_DATE”.</span></span><br><span class="line">        note.addStringProperty(<span class="string">"comment"</span>);</span><br><span class="line">        note.addDateProperty(<span class="string">"date"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三-_生成_DAO_文件（数据库）">三. 生成 DAO 文件（数据库）</h3><ul>
<li><p>执行 generator 工程，如一切正常，你将会在控制台看到如下日志，并且在主工程「java-gen」下会发现生成了DaoMaster、DaoSession、NoteDao、Note共4个类文件。<br><img src="http://7xikfc.com1.z0.glb.clouddn.com/gr_result.png" alt=""></p>
<p>如果在此处出错，你可以依据错误日志进行排查，主要看是否<strong>输出目录</strong>存在？其他<strong>配置</strong>是否正确？等</p>
</li>
</ul>
<h3 id="四-_在_Android_工程中进行数据库操作">四. 在 Android 工程中进行数据库操作</h3><p>这里，我们只创建一个 NodeActivity 类，用于测试与讲解 greenDAO 的增、删、查功能。  </p>
<ul>
<li>activity_note.xml  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/linearLayout1"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:orientation</span>=<span class="value">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">EditText</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/editTextNote"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_weight</span>=<span class="value">"1"</span></span><br><span class="line">            <span class="attribute">android:hint</span>=<span class="value">"Enter new note"</span></span><br><span class="line">            <span class="attribute">android:inputType</span>=<span class="value">"text"</span>&gt;</span><span class="tag">&lt;/<span class="title">EditText</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/buttonAdd"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:onClick</span>=<span class="value">"onMyButtonClick"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"Add"</span>&gt;</span><span class="tag">&lt;/<span class="title">Button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/buttonSearch"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:onClick</span>=<span class="value">"onMyButtonClick"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"Search"</span>&gt;</span><span class="tag">&lt;/<span class="title">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">ListView</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@android:id/list"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>&gt;</span><span class="tag">&lt;/<span class="title">ListView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>NoteActivity.java  <figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteActivity</span> <span class="keyword">extends</span> <span class="title">ListActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SQLiteDatabase db;</span><br><span class="line">    <span class="keyword">private</span> EditText editText;</span><br><span class="line">    <span class="keyword">private</span> DaoMaster daoMaster;</span><br><span class="line">    <span class="keyword">private</span> DaoSession daoSession;</span><br><span class="line">    <span class="keyword">private</span> Cursor cursor;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"DaoExample"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_note);</span><br><span class="line">        <span class="comment">// 官方推荐将获取 DaoMaster 对象的方法放到 Application 层，这样将避免多次创建生成 Session 对象</span></span><br><span class="line">        setupDatabase();</span><br><span class="line">        <span class="comment">// 获取 NoteDao 对象</span></span><br><span class="line">        getNoteDao();</span><br><span class="line"></span><br><span class="line">        String textColumn = NoteDao.Properties.Text.columnName;</span><br><span class="line">        String orderBy = textColumn + <span class="string">" COLLATE LOCALIZED ASC"</span>;</span><br><span class="line">        cursor = db.query(getNoteDao().getTablename(), getNoteDao().getAllColumns(), <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, orderBy);</span><br><span class="line">        String[] from = &#123;textColumn, NoteDao.Properties.Comment.columnName&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] to = &#123;android.R.id.text1, android.R.id.text2&#125;;</span><br><span class="line"></span><br><span class="line">        SimpleCursorAdapter adapter = <span class="keyword">new</span> SimpleCursorAdapter(<span class="keyword">this</span>, android.R.layout.simple_list_item_2, cursor, from,</span><br><span class="line">                to);</span><br><span class="line">        setListAdapter(adapter);</span><br><span class="line"></span><br><span class="line">        editText = (EditText) findViewById(R.id.editTextNote);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">setupDatabase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过 DaoMaster 的内部类 DevOpenHelper，你可以得到一个便利的 SQLiteOpenHelper 对象。</span></span><br><span class="line">        <span class="comment">// 可能你已经注意到了，你并不需要去编写「CREATE TABLE」这样的 SQL 语句，因为 greenDAO 已经帮你做了。</span></span><br><span class="line">        <span class="comment">// 注意：默认的 DaoMaster.DevOpenHelper 会在数据库升级时，删除所有的表，意味着这将导致数据的丢失。</span></span><br><span class="line">        <span class="comment">// 所以，在正式的项目中，你还应该做一层封装，来实现数据库的安全升级。</span></span><br><span class="line">        DaoMaster.DevOpenHelper helper = <span class="keyword">new</span> DaoMaster.DevOpenHelper(<span class="keyword">this</span>, <span class="string">"notes-db"</span>, <span class="keyword">null</span>);</span><br><span class="line">        db = helper.getWritableDatabase();</span><br><span class="line">        <span class="comment">// 注意：该数据库连接属于 DaoMaster，所以多个 Session 指的是相同的数据库连接。</span></span><br><span class="line">        daoMaster = <span class="keyword">new</span> DaoMaster(db);</span><br><span class="line">        daoSession = daoMaster.newSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function">NoteDao <span class="title">getNoteDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> daoSession.<span class="title">getNoteDao</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Button 点击的监听事件</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> view</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onMyButtonClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.buttonAdd:</span><br><span class="line">                addNote();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.buttonSearch:</span><br><span class="line">                search();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                Log.d(TAG, <span class="string">"what has gone wrong ?"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">addNote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String noteText = editText.getText().toString();</span><br><span class="line">        editText.setText(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> DateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);</span><br><span class="line">        String comment = <span class="string">"Added on "</span> + df.format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入操作，简单到只要你创建一个 Java 对象</span></span><br><span class="line">        Note note = <span class="keyword">new</span> Note(<span class="keyword">null</span>, noteText, comment, <span class="keyword">new</span> Date());</span><br><span class="line">        getNoteDao().insert(note);</span><br><span class="line">        Log.d(TAG, <span class="string">"Inserted new note, ID: "</span> + note.getId());</span><br><span class="line">        cursor.requery();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Query 类代表了一个可以被重复执行的查询</span></span><br><span class="line">        Query query = getNoteDao().queryBuilder()</span><br><span class="line">                .where(NoteDao.Properties.Text.eq(<span class="string">"Test1"</span>))</span><br><span class="line">                .orderAsc(NoteDao.Properties.Date)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">//      查询结果以 List 返回</span></span><br><span class="line"><span class="comment">//      List notes = query.list();</span></span><br><span class="line">        <span class="comment">// 在 QueryBuilder 类中内置两个 Flag 用于方便输出执行的 SQL 语句与传递参数的值</span></span><br><span class="line">        QueryBuilder.LOG_SQL = <span class="keyword">true</span>;</span><br><span class="line">        QueryBuilder.LOG_VALUES = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * ListView 的监听事件，用于删除一个 Item</span><br><span class="line">     * <span class="doctag">@param</span> l</span><br><span class="line">     * <span class="doctag">@param</span> v</span><br><span class="line">     * <span class="doctag">@param</span> position</span><br><span class="line">     * <span class="doctag">@param</span> id</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onListItemClick</span><span class="params">(ListView l, View v, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 删除操作，你可以通过「id」也可以一次性删除所有</span></span><br><span class="line">        getNoteDao().deleteByKey(id);</span><br><span class="line"><span class="comment">//        getNoteDao().deleteAll();</span></span><br><span class="line">        Log.d(TAG, <span class="string">"Deleted note, ID: "</span> + id);</span><br><span class="line">        cursor.requery();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="五-_运行结果">五. 运行结果</h3><p>一切就绪，让我们看看效果吧！运行程序，分别执行<strong>添加</strong>按钮、<strong>删除</strong>（点击 List 的 Item）与<strong>查询</strong>按钮，可以在控制台得到如下日志：  </p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/gd_sc_add_min.png" alt="screenshot" title="screenshot" width="350" height="622"> <img src="http://7xikfc.com1.z0.glb.clouddn.com/gd_sc_delete_min.png" alt="screenshot" title="screenshot" width="350" height="622">  </p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/gd_sc_search.png" alt=""></p>
<hr>
<h2 id="升级">升级</h2><p><a href="http://blog.csdn.net/growth58/article/details/50453038" target="_blank" rel="external">GreenDao数据库升级解决方案</a> by <a href="http://weibo.com/weiguo58" target="_blank" rel="external">@于卫国</a></p>
<hr>
<h2 id="最后">最后</h2><ul>
<li>本文 Demo 下载链接：<a href="https://github.com/tangqi92/MyGreenDAO" target="_blank" rel="external">https://github.com/tangqi92/MyGreenDAO</a>  </li>
<li>本教程旨在介绍 greenDAO 的基本用法与配置，更高级与详细的使用，请参见 <a href="http://greendao-orm.com/" target="_blank" rel="external">官网</a>  </li>
<li>如本文有任何错误与遗漏，欢迎指正。</li>
</ul>
<hr>
<h2 id="References_&amp;_More">References &amp; More</h2><p><a href="http://greendao-orm.com/" target="_blank" rel="external">http://greendao-orm.com/</a><br><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">https://github.com/greenrobot/greenDAO</a><br><a href="http://stackoverflow.com/questions/tagged/greendao" target="_blank" rel="external">http://stackoverflow.com/questions/tagged/greendao</a><br><a href="https://groups.google.com/forum/#!forum/greendao" target="_blank" rel="external">https://groups.google.com/forum/#!forum/greendao</a></p>
<hr>
<h2 id="期待与你成为朋友">期待与你成为朋友</h2><ul>
<li>Weibo: <a href="http://weibo.com/qiktang" target="_blank" rel="external">汤奇V</a>  </li>
<li>GitHub: <a href="https://github.com/tangqi92" target="_blank" rel="external">tangqi92</a></li>
<li>Blog: <a href="http://itangqi.me/">http://itangqi.me</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>我相信，在平时的开发过程中，大家一定会或多或少地接触到 <a href="https://en.wikipedia.org/wiki/SQLite">SQLite</a>。然而在使用它时，我们往往需要做许多额外的工作，像编写 SQL 语句与解析查询结果等。所以，适用于 Android 的 <strong>ORM</strong> 框架也就孕育而生了，现在市面上主流的框架有 OrmLite、SugarORM、Active Android、Realm 与 GreenDAO。而今天的主角便是 <strong>greenDAO</strong>，下面，我将详解地介绍如何在 <strong>Android Studio</strong> 上使用 <strong>greenDAO</strong>，并结合代码总结一些使用过程中的心得。</p>]]>
    
    </summary>
    
      <category term="ORM" scheme="http://itangqi.me/tags/ORM/"/>
    
      <category term="greenDAO" scheme="http://itangqi.me/tags/greenDAO/"/>
    
      <category term="Android" scheme="http://itangqi.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何通过电脑操控 Android 设备]]></title>
    <link href="http://itangqi.me/2015/04/11/control-android-device-by-pc/"/>
    <id>http://itangqi.me/2015/04/11/control-android-device-by-pc/</id>
    <published>2015-04-10T16:00:00.000Z</published>
    <updated>2016-02-25T05:43:46.000Z</updated>
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>由于公司项目的需要，最近花时间研究了下「电脑操控 Android 设备」的具体实现，其间踩了不少坑（说多了都是泪啊），在此记录下来供大家参考与学习。</p>
<a id="more"></a> 
<h3 id="VNC">VNC</h3><p>其中涉及到最主要的技术便是 <a href="http://en.wikipedia.org/wiki/Virtual_Network_Computing" target="_blank" rel="external">VNC</a> (Virtual Network Computing) ，它是使用远程帧缓冲协议（RFB）远程控制另一台计算机（设备）的图形桌面共享系统，其主要包括：                              </p>
<ul>
<li><p>VNC Server ：此服务程序必须在在主（或遥控）计算机（设备）上运行。你只能作为使用者（不需要根用户身份）使用此项服务。</p>
</li>
<li><p>VNC Viewer ：本地应用程序，用于远程接入运行 VNC Server 的计算机（设备）并显示其环境。你需要知道远程计算机（设备）的 IP 地址和 VNC Server 设定的密码。</p>
</li>
</ul>
<h3 id="工作流程">工作流程</h3><ol>
<li>在服务器端启动 VNC Server。</li>
<li>VNC 客户端通过浏览器或 VNC Viewer 连接至 VNC Server。</li>
<li>VNC Server 传送一对话窗口至客户端，要求输入连接密码， 以及存取的 VNC Server 显示装置。</li>
<li>在客户端输入联机密码后，VNC Server 验证客户端是否具有存取权限。</li>
<li>若是客户端通过 VNC Server 的验证，客户端即要求 VNC Server 显示桌面环境。</li>
<li>VNC Server 通过 X Protocol 要求 X Server 将画面显示控制权交由 VNC Server 负责。</li>
<li>VNC Server 将来由 X Server 的桌面环境利用 VNC 通信协议送至客户端， 并且允许客户端控制 VNC Server 的桌面环境及输入装置。</li>
</ol>
<hr>
<h2 id="说明">说明</h2><p>网上已经有许多关于电脑控制手机（真机）的工具与教程且亲测可行，具体请参考：  </p>
<ul>
<li><a href="http://blog.laptopmag.com/control-android-from-pc" target="_blank" rel="external">How to Control an Android Device From Your PC</a>  </li>
<li><a href="http://www.21kexin.com/jishu/201307308.html" target="_blank" rel="external">通过Droid VNC Server简单配置让PC电脑控制Android手机
</a></li>
</ul>
<p>但是！但是！但是！！！<br>坑就是从这里开始的，由于项目需求的特殊性，我需要在<a href="http://www.360doc.com/content/11/0412/10/4818519_109021260.shtml" target="_blank" rel="external">模拟器</a>（Android Emulator）上实现相同的效果（后面会具体说明模拟器与真机的差别与难点），所以接下来我会详细介绍实现操控模拟器的具体操作步骤。</p>
<hr>
<h2 id="具体操作">具体操作</h2><h3 id="模拟器_ROOT">模拟器 ROOT</h3><p>由于大多数「VNC Server For Android」应用都需要求手机为 Root 状态（后来发现有不需要 Root 的，但没有进行实际验证），所以第一步便是实现模拟器的 Root ：</p>
<ul>
<li>如果你使用的是第三方模拟器 <a href="http://www.iplaysoft.com/genymotion.html" target="_blank" rel="external">Genymotion</a> 的话（在这里强烈推荐下），则系统（4.0+）默认为 Root 状态</li>
</ul>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/1.pic_hd.jpg" alt=""> </p>
<ul>
<li><p>如果你使用的是原生模拟器的话（赶紧换吧，立马提升工作效率），则可以按如下操作实现 Root ：                                   </p>
<p>  <a href="http://blog.csdn.net/guangsuxinhen4/article/details/26241067" target="_blank" rel="external">Android AVD emulator模拟器获取root权限（4.1.2以下）</a></p>
</li>
</ul>
<h3 id="下载_android-vnc-server">下载 android-vnc-server</h3><p>这里就要涉及到「ARM」与「X86」的概念，详情请参见：<a href="http://mobile.hiapk.com/knowledge/common/130718/1438966.html" target="_blank" rel="external">手机CPU科普 ARM构架与X86构架的优劣对比</a>，之后便参照下面步骤实现安装：</p>
<ul>
<li><p>如果你使用的是第三方模拟器 Genymotion，由于其依托 <a href="http://baike.baidu.com/link?url=qYBqekGQvAoJs5t2w1c8a1omyj44_lnzwMx5HxNi7YzU2kKMFrs9RFgwqzQ2tuuF7OLmRPJB9D6GqF8cR_myoq" target="_blank" rel="external">VirtualBox</a>，所以其模拟器的架构默认为 X86，因此你需要下载可以在 X86 下运行的 VNC Server 版本：<a href="http://pan.baidu.com/s/1sjODcdB" target="_blank" rel="external">androidvncserver_x86</a></p>
</li>
<li><p>如果你使用的是原生模拟器，则在创建 AVD 时「CPU/ABI」选择「ARM」，</p>
</li>
</ul>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/arm2.png" alt=""></p>
<p>随后下载 ARM 版本 <a href="http://pan.baidu.com/s/1pJmh42f" target="_blank" rel="external">androidvncserver</a>               </p>
<h3 id="安装_android-vnc-server">安装 android-vnc-server</h3><h3 id="1-_将「androidvncserver_x86」(如果你使用原生模拟器则为「androidserver」)拷贝到模拟器指定路径（/data/local）下，我试了两种方法：">1. 将「androidvncserver_x86」(如果你使用原生模拟器则为「androidserver」)拷贝到模拟器指定路径（/data/local）下，我试了两种方法：</h3><ul>
<li><p>使用 adb push 进去，如下：</p>
<pre><code><span class="label">adb</span> <span class="keyword">push </span>所在路径/<span class="keyword">androidvncserver_x86 </span>/<span class="preprocessor">data</span>/local/
</code></pre></li>
<li><p>使用文件夹管理工具，如 <a href="http://pan.baidu.com/s/1c0vXrRq" target="_blank" rel="external">Root Explorer</a></p>
</li>
</ul>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/explorer.jpg" alt=""></p>
<h3 id="2-_更改「androidvncserver_x86」的权限，同样也有两种方法：">2. 更改「androidvncserver_x86」的权限，同样也有两种方法：</h3><ul>
<li><p>使用 adb</p>
<pre><code><span class="preprocessor"># chmod <span class="number">555</span> androidvncserver_x86</span>
</code></pre></li>
<li><p>使用文件夹管理</p>
</li>
</ul>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/555.png" alt=""></p>
<h3 id="3-_运行_androidvncserver_x86">3. 运行 androidvncserver_x86</h3><pre><code># /<span class="preprocessor">data</span>/local/<span class="keyword">androidvncserver_x86 </span>&amp;
</code></pre><p><strong>注：如果这一步出现</strong></p>
<blockquote>
<p>Initializing framebuffer device /dev/graphics/fb0…<br>xres=320, yres=480, xresv=320, yresv=960, xoffs=0, yoffs=0, bpp=16<br>Initializing keyboard device /dev/input/event3 …<br>cannot open kbd device /dev/input/event3</p>
</blockquote>
<p>大家可以参考<a href="http://blog.goo.ne.jp/karutaya/e/a815571ef06640ea33fbb1bcf08ac9ed" target="_blank" rel="external">这里</a>，其关键就是：</p>
<pre><code>&gt; adb shell
# <span class="regexp">/data/</span>androidvncserver -k <span class="regexp">/dev/i</span>nput<span class="regexp">/event0 -t /</span>dev<span class="regexp">/input/</span>event0 &amp;
</code></pre><h3 id="运行_VNC_Viewer">运行 VNC Viewer</h3><ol>
<li>下载相应版本<a href="https://www.realvnc.com/download/vnc/" target="_blank" rel="external">VNC</a>并安装</li>
<li>adb forward tcp:5901 tcp:5901</li>
<li>打开 VNC Viewer，地址填写「127.0.0.1:5901」，点击「连接」后便可看到画面</li>
</ol>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/viewer.png" alt=""></p>
<hr>
<h2 id="Tips">Tips</h2><ol>
<li><a href="http://jingyan.baidu.com/article/17bd8e52f514d985ab2bb800.html" target="_blank" rel="external">ADB 环境变量配置</a></li>
<li><a href="http://www.open-open.com/lib/view/1327557366686" target="_blank" rel="external">ADB Shell 命令详解</a></li>
</ol>
<hr>
<h2 id="期待与你成为朋友">期待与你成为朋友</h2><ul>
<li>Weibo: <a href="http://weibo.com/qiktang" target="_blank" rel="external">汤奇V</a>  </li>
<li>GitHub: <a href="https://github.com/tangqi92" target="_blank" rel="external">tangqi92</a></li>
<li>Blog: <a href="http://itangqi.me/">http://itangqi.me</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="背景">背景</h2><p>由于公司项目的需要，最近花时间研究了下「电脑操控 Android 设备」的具体实现，其间踩了不少坑（说多了都是泪啊），在此记录下来供大家参考与学习。</p>]]>
    
    </summary>
    
      <category term="Emulator" scheme="http://itangqi.me/tags/Emulator/"/>
    
      <category term="VNC" scheme="http://itangqi.me/tags/VNC/"/>
    
      <category term="Android" scheme="http://itangqi.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 与 JavaScript 如何进行交互]]></title>
    <link href="http://itangqi.me/2015/03/07/java-and-javascript-interaction/"/>
    <id>http://itangqi.me/2015/03/07/java-and-javascript-interaction/</id>
    <published>2015-03-06T16:00:00.000Z</published>
    <updated>2016-02-25T05:43:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Hybrid_App">Hybrid App</h2><ul>
<li><p><a href="http://baike.baidu.com/link?url=oEcVTV16sU0agGHHebRey-cur6xumEuvDU77apaDBHKgGyWZwxTQYKCacn_MX51sogG2l4aj_KX406pcrP5sHK" target="_blank" rel="external">Hybrid App</a> : 又称「混合模式移动应用」，是指介于 Web App 和 Native App 这两者之间的 App，兼具「Native App 良好用户交互体验的优势」和「Web App 跨平台开发的优势」。</p>
</li>
<li><p><a href="http://www.smashingmagazine.com/2014/10/21/providing-a-native-experience-with-web-technologies/" target="_blank" rel="external">Hybrid Mobile Apps: Providing A Native Experience With Web Technologies</a> : This article provides many hints, code snippets and lessons learned on how to build great hybrid mobile apps.</p>
</li>
<li><p><a href="https://www.codementor.io/android/tutorial/secure-hybrid-html5-android-webview-mobile-app" target="_blank" rel="external">Tutorial: How to Safely Implement Hybrid HTML5 Android Applications</a> : In this short tutorial we will discover how to integrate web applications into our native Android applications, including how to create a secure JavaScript-Java bridge.</p>
</li>
</ul>
<a id="more"></a> 
<hr>
<h2 id="WebKit_&amp;_Chromium">WebKit &amp; Chromium</h2><ul>
<li><p><a href="http://developer.android.com/reference/android/webkit/package-summary.html" target="_blank" rel="external">WebKit</a> : 官方文档</p>
</li>
<li><p><a href="http://www.mobilexweb.com/blog/android-4-4-kitkat-browser-chrome-webview" target="_blank" rel="external">Android 4.4 KitKat, the browser and the Chrome WebView</a> : Android 4.4 has made a big change in the OS’ internals for HTML5 development: it has replaced its original WebKit-based WebView with modern Chromium.</p>
</li>
<li><p><a href="http://blog.csdn.net/milado_nju/article/details/17098399" target="_blank" rel="external">理解WebKit和Chromium: Android 4.4 上的Chromium WebView</a> : 在最新的Android 4.4 Kitkat 版本中，原本基于Android「WebKit」的 WebView 实现被换成基于「Chromium」的 WebView 实现。</p>
</li>
</ul>
<hr>
<h2 id="交互实例">交互实例</h2><ul>
<li><a href="http://droidyue.com/blog/2014/09/20/interaction-between-java-and-javascript-in-android/" target="_blank" rel="external">Android中Java和JavaScript交互</a> : 此篇博文十分详细地介绍了具体的实现步骤和可能会遇到的问题及解决办法。</li>
</ul>
<p>###Java 与 JS 交互只需如下几步：</p>
<ol>
<li>WebView开启JavaScript脚本执行 </li>
<li>WebView设置供JavaScript调用的交互接口</li>
<li>客户端和网页端编写调用对方的代码</li>
</ol>
<hr>
<h2 id="安全性">安全性</h2><blockquote>
<p>网上的方法可以告诉我们这个时候我们可以使用addjavascriptInterface来注入原生接口到JS中，但是在安卓4.2以下的系统中，这种方案却我们的应用带来了很大的安全风险。攻击者如果在页面执行一些非法的JS（诱导用户打开一些钓鱼网站以进入风险页面），极有可能反弹拿到用户手机的shell权限。接下来攻击者就可以在后台默默安装木马，完全洞穿用户的手机。详细的攻击过程可以见乌云平台的这份报告：<a href="http://drops.wooyun.org/papers/548" target="_blank" rel="external">WebView中接口隐患与手机挂马利用</a>。</p>
</blockquote>
<ul>
<li><p><a href="http://www.pedant.cn/2014/07/04/webview-js-java-interface-research/" target="_blank" rel="external">在WebView中如何让JS与Java安全地互相调用</a></p>
</li>
<li><p><a href="http://blog.csdn.net/leehong2005/article/details/11808557" target="_blank" rel="external">Android WebView的Js对象注入漏洞解决方案</a></p>
</li>
<li><p><a href="http://gundumw100.iteye.com/blog/1158719" target="_blank" rel="external">在Android的webview中定制js的alert,confirm和prompt对话框的方法</a></p>
</li>
</ul>
<hr>
<h2 id="期待与你成为朋友">期待与你成为朋友</h2><ul>
<li>Weibo: <a href="http://weibo.com/qiktang" target="_blank" rel="external">汤奇V</a>  </li>
<li>GitHub: <a href="https://github.com/tangqi92" target="_blank" rel="external">tangqi92</a></li>
<li>Blog: <a href="http://itangqi.me/">http://itangqi.me</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Hybrid_App">Hybrid App</h2><ul>
<li><p><a href="http://baike.baidu.com/link?url=oEcVTV16sU0agGHHebRey-cur6xumEuvDU77apaDBHKgGyWZwxTQYKCacn_MX51sogG2l4aj_KX406pcrP5sHK">Hybrid App</a> : 又称「混合模式移动应用」，是指介于 Web App 和 Native App 这两者之间的 App，兼具「Native App 良好用户交互体验的优势」和「Web App 跨平台开发的优势」。</p>
</li>
<li><p><a href="http://www.smashingmagazine.com/2014/10/21/providing-a-native-experience-with-web-technologies/">Hybrid Mobile Apps: Providing A Native Experience With Web Technologies</a> : This article provides many hints, code snippets and lessons learned on how to build great hybrid mobile apps.</p>
</li>
<li><p><a href="https://www.codementor.io/android/tutorial/secure-hybrid-html5-android-webview-mobile-app">Tutorial: How to Safely Implement Hybrid HTML5 Android Applications</a> : In this short tutorial we will discover how to integrate web applications into our native Android applications, including how to create a secure JavaScript-Java bridge.</p>
</li>
</ul>]]>
    
    </summary>
    
      <category term="Hybrid App" scheme="http://itangqi.me/tags/Hybrid-App/"/>
    
      <category term="WebView" scheme="http://itangqi.me/tags/WebView/"/>
    
      <category term="Android" scheme="http://itangqi.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈 Material Design]]></title>
    <link href="http://itangqi.me/2015/02/15/talk-about-material-design/"/>
    <id>http://itangqi.me/2015/02/15/talk-about-material-design/</id>
    <published>2015-02-14T16:00:00.000Z</published>
    <updated>2016-02-25T05:42:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>由于公司产品应用场景的特殊性，在平时的开发过程中，我基本不需要涉及 UI 相关的工作，但每每见到各种自定义控件与酷炫的动画效果时，我心里总是痒痒的。所以我决定开始学习与积累相关知识，虽然离「Material Design」概念的提出已经有一段时间了，但现在开始学习也不算太晚。</p>
<a id="more"></a> 
<hr>
<h2 id="Material_Design">Material Design</h2><ul>
<li><p><a href="http://designshack.net/articles/webstandards/google-material-design-everything-you-need-to-know/" target="_blank" rel="external">Google Material Design: Everything You Need to Know</a>: 正如标题所示，这是一篇，告知你关于 Material Design 所需要知道的所有的文章</p>
</li>
<li><p><a href="https://medium.com/feedly-behind-the-curtain/an-exploration-in-material-design-by-feedly-8c1a1cbdfdcd" target="_blank" rel="external">An exploration in Material Design</a>: 作者以 <a href="https://feedly.com/" target="_blank" rel="external">Feedly</a> 客户端的改版为例，介绍 Material Design 在实际开发中的应用</p>
</li>
<li><p><a href="http://blog.csdn.net/a396901990/article/category/2634371" target="_blank" rel="external">ANDROID L——Material Design详解</a>: 国内一个讲解 Material Design 的系列专栏</p>
</li>
</ul>
<hr>
<h2 id="RecyclerView_&amp;_CardView_&amp;_Palette">RecyclerView &amp; CardView &amp; Palette</h2><blockquote>
<p>Android Lollipop introduces corresponding new APIs to help developers implement the Material Design guidelines, and two of these UI widgets are RecyclerView and CardView. The RecyclerView is designed to replace the ListView, while the CardView is a new type of layout.</p>
</blockquote>
<p>Google 官方文档永远是学习的最佳资料：</p>
<ul>
<li><p><a href="https://developer.android.com/training/material/lists-cards.html" target="_blank" rel="external">Creating Lists and Cards</a></p>
</li>
<li><p><a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html" target="_blank" rel="external">RecyclerView</a></p>
</li>
<li><p><a href="https://developer.android.com/reference/android/support/v7/widget/CardView.html" target="_blank" rel="external">CardView</a></p>
</li>
<li><p><a href="https://developer.android.com/reference/android/support/v7/graphics/Palette.html" target="_blank" rel="external">Palette</a> </p>
</li>
</ul>
<hr>
<h2 id="How_to_use">How to use</h2><p>下面介绍如何实现：</p>
<ul>
<li><p><a href="https://www.grokkingandroid.com/first-glance-androids-recyclerview/" target="_blank" rel="external">A First Glance at Android’s RecyclerView</a></p>
</li>
<li><p><a href="http://frank-zhu.github.io/android/2015/01/16/android-recyclerview-part-1/" target="_blank" rel="external">RecyclerView使用详解（一）</a></p>
</li>
<li><p><a href="http://techlovejump.com/android-cardview-widget-example-add-to-list-using-recyclerview/" target="_blank" rel="external">Android CardView Widget – Add Cards to List using RecyclerView</a></p>
</li>
<li><p><a href="https://www.bignerdranch.com/blog/extracting-colors-to-a-palette-with-android-lollipop/" target="_blank" rel="external">Extracting Colors to a Palette with Android Lollipop</a></p>
</li>
<li><p><a href="http://xmodulo.com/recyclerview-cardview-android.html" target="_blank" rel="external">How to use RecyclerView and CardView on Android Lollipop</a></p>
</li>
<li><p><a href="http://www.binpress.com/tutorial/android-l-recyclerview-and-cardview-tutorial/156" target="_blank" rel="external">A Guide to Android RecyclerView and CardView</a>  </p>
</li>
</ul>
<hr>
<h2 id="期待与你成为朋友">期待与你成为朋友</h2><ul>
<li>Weibo: <a href="http://weibo.com/qiktang" target="_blank" rel="external">汤奇V</a>  </li>
<li>GitHub: <a href="https://github.com/tangqi92" target="_blank" rel="external">tangqi92</a></li>
<li>Blog: <a href="http://itangqi.me/">http://itangqi.me</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>由于公司产品应用场景的特殊性，在平时的开发过程中，我基本不需要涉及 UI 相关的工作，但每每见到各种自定义控件与酷炫的动画效果时，我心里总是痒痒的。所以我决定开始学习与积累相关知识，虽然离「Material Design」概念的提出已经有一段时间了，但现在开始学习也不算太晚。</p>]]>
    
    </summary>
    
      <category term="CardView" scheme="http://itangqi.me/tags/CardView/"/>
    
      <category term="Material Design" scheme="http://itangqi.me/tags/Material-Design/"/>
    
      <category term="Palette" scheme="http://itangqi.me/tags/Palette/"/>
    
      <category term="RecyclerView" scheme="http://itangqi.me/tags/RecyclerView/"/>
    
      <category term="Android" scheme="http://itangqi.me/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[相见恨晚 - Alfred Workflows]]></title>
    <link href="http://itangqi.me/2015/01/21/alfred-workflows-recommendation/"/>
    <id>http://itangqi.me/2015/01/21/alfred-workflows-recommendation/</id>
    <published>2015-01-20T16:00:00.000Z</published>
    <updated>2016-02-25T05:42:11.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>如果你要问我「Mac 上必备的软件有哪些?」<br>那么，<a href="http://www.alfredapp.com/" target="_blank" rel="external"><strong>Alfred</strong></a> 将会当仁不让地成为我第一个推荐给你的<strong>神器</strong>！（对，你没听错，相信我，它绝对配得上「神器」的称号。）</p>
<p>因为当我用上 Alfred 的那一刻，我便有种相见恨晚的感觉，它极大地提高了我的效率（无论是工作还是生活），事实是，我现在已经离不开它了！</p>
<a id="more"></a> 
<p>关于「Alfred」的基本介绍与使用技巧，你可以参见如下两篇文章：  </p>
<ul>
<li><a href="http://macshuo.com/?p=625" target="_blank" rel="external">神兵利器——Alfred</a>  </li>
<li><a href="http://wellsnake.com/jekyll/update/2014/06/15/001/" target="_blank" rel="external">丢掉鼠标－Mac神软Alfred使用手册1</a></li>
</ul>
<p>而今天我要介绍的重点，则是 Alfred 的杀手级功能 <a href="http://baike.baidu.com/link?url=vWcxHgs2yTgrDl3DgvZl17_FLMZdp9RSdExPrW0MRDtjn4R4SjbSSnRBK3nD3NG03da3IAuEbIs14celMAhEBMNC-NF4lNZjcX2WYG6UtVG4YpDCSQ0x9XgV23TCZyMilFM4WmQPTNfIEu46nymBeK" target="_blank" rel="external">Workflows</a>，下面我将隆重介绍，在我每天工作和生活中都会使用到的 Workflow ，相信其中一定有适合你的。</p>
<hr>
<h2 id="例子">例子</h2><h3 id="StackOverflow">StackOverflow</h3><ul>
<li>StackOverflow on Alfred ~ by <a href="https://github.com/xhinking" target="_blank" rel="external">@xhinking</a>             </li>
<li>Triggers: st {query}</li>
<li><a href="https://raw.githubusercontent.com/xhinking/Alfred/master/stackoverflow.alfredworkflow" target="_blank" rel="external">Download Link</a><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/Screen Shot 2015-04-28 at 10.24.05.png" alt=""></li>
</ul>
<h3 id="SNSearch">SNSearch</h3><ul>
<li>SNSearch 是为 Alfred 开发的一款 Workflow ，主要功能是检索 Startup News 网站的最新推荐文章 ~ by <a href="https://github.com/jackychi" target="_blank" rel="external">@池建强</a></li>
<li>Triggers: sn all , sn {query}</li>
<li><a href="https://raw.githubusercontent.com/jackychi/SNSearch/master/SNSearch.alfredworkflow" target="_blank" rel="external">Download Link</a><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/Screen Shot 2015-04-28 at 10.18.27.png" alt=""></li>
</ul>
<h3 id="V2EX">V2EX</h3><ul>
<li>一个给 V2EXer 用的 Alfred 2 Workflow ~ by <a href="https://github.com/hzlzh" target="_blank" rel="external">@hzlzh</a>           </li>
<li>Triggers: v2ex new , v2ex @{name}</li>
<li><a href="http://www.alfredworkflow.com/wp-admin/admin-ajax.php?action=cfdb-file&amp;s=1363880004.5359&amp;form=Alfred+Workflow&amp;field=workflow_file" target="_blank" rel="external">Download Link</a><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/Screen Shot 2015-04-28 at 10.13.18.png" alt=""></li>
</ul>
<h3 id="Dash">Dash</h3><ul>
<li>ScreenshotShorter keywords for using dash lookups. Custom logo for each language included ~ by <a href="https://github.com/willfarrell" target="_blank" rel="external">willfarrell</a></li>
<li>Triggers: dash {query}</li>
<li><a href="http://www.alfredworkflow.com/wp-admin/admin-ajax.php?action=cfdb-file&amp;s=1366731149.1667&amp;form=Alfred+Workflow&amp;field=workflow_file" target="_blank" rel="external">Download Link</a><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/Screen Shot 2015-04-28 at 10.25.30.png" alt=""></li>
</ul>
<h3 id="知乎">知乎</h3><ul>
<li>知乎 Workflow ~ by <a href="https://github.com/KJlmfe" target="_blank" rel="external">KJlmfe</a></li>
<li>在知乎里搜索话题、问题和人：zh {query}</li>
<li>查看今日知乎日报：zhdaily</li>
<li><a href="https://raw.githubusercontent.com/KJlmfe/Alfred-workflows/master/zhihu.alfredworkflow" target="_blank" rel="external">Download Link</a><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/Screen Shot 2015-04-28 at 10.20.31.png" alt=""><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/Screen Shot 2015-04-28 at 10.20.40.png" alt=""></li>
</ul>
<h3 id="Last_changed_files">Last changed files</h3><ul>
<li>Lists recently changed files (searchable) for drag&amp;drop or file actions in alfred ~ by <a href="https://github.com/oderwat" target="_blank" rel="external">oderwat</a></li>
<li>Triggers: .last</li>
<li><a href="https://raw.githubusercontent.com/oderwat/alfredworkflows/master/Last%20changed%20files.alfredworkflow" target="_blank" rel="external">Download Link</a><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/Screen Shot 2015-04-28 at 10.03.25.png" alt=""></li>
</ul>
<h3 id="百度翻译">百度翻译</h3><ul>
<li>百度翻译 ~ by <a href="https://github.com/zxyah" target="_blank" rel="external">zxyah</a></li>
<li>Triggers: bfy {query}</li>
<li><a href="https://raw.githubusercontent.com/zxyah/alfred/master/Baidu-Translate/%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91.alfredworkflow" target="_blank" rel="external">Download Link</a><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/Screen Shot 2015-04-28 at 10.05.08.png" alt=""></li>
</ul>
<h3 id="百度地图">百度地图</h3><ul>
<li>百度地图搜索(Search in Baidu Map) ~ by <a href="https://github.com/wofeiwo" target="_blank" rel="external">GaRy</a></li>
<li>首先输入”setl”+空格+城市名，设置默认搜索城市地点</li>
<li>输入”bmap”+空格+搜索关键字即可。然后就等他出结果，回车或者cmd+数字就能打开默认浏览器进入地图页面进入地图页面查看搜索结果。</li>
<li><a href="https://raw.githubusercontent.com/wofeiwo/alfred-baidu-map/master/Baidu%20Map.alfredworkflow" target="_blank" rel="external">Download Link</a><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/Screen Shot 2015-04-28 at 10.19.13.png" alt=""></li>
</ul>
<h3 id="Douban">Douban</h3><ul>
<li>搜索豆瓣电影、图书、音乐 ~ by <a href="https://github.com/lucifr" target="_blank" rel="external">Lucifr</a></li>
<li>Triggers: book {query} , movie {query} , music {query}</li>
<li><a href="https://raw.githubusercontent.com/lucifr/Alfredv2-Extensions/master/Douban.alfredworkflow" target="_blank" rel="external">Download Link</a><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/Screen Shot 2015-04-28 at 10.12.07.png" alt=""><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/Screen Shot 2015-04-28 at 10.12.24.png" alt=""><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/Screen Shot 2015-04-28 at 10.12.47.png" alt=""></li>
</ul>
<h3 id="社交网络_ID_直达">社交网络 ID 直达</h3><ul>
<li>A fast way to view the profile when you know his @username ~ by Astrian Zheng</li>
<li>Triggers: @ {username}</li>
<li><a href="http://www.alfredworkflow.com/wp-admin/admin-ajax.php?action=cfdb-file&amp;s=1428503769.7937&amp;form=Alfred+Workflow&amp;field=workflow_file" target="_blank" rel="external">Download Link</a><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/Screen Shot 2015-04-28 at 10.26.37.png" alt=""></li>
</ul>
<h3 id="水木社区">水木社区</h3><ul>
<li>Browse newsmth.net bbs in Alfred ~ by <a href="https://github.com/yrlihuan" target="_blank" rel="external">@yrlihuan</a></li>
<li>浏览今日十大: smth</li>
<li>查找板块: smth 板块拼音<ul>
<li>smth shuimu</li>
<li>smth jingji</li>
</ul>
</li>
<li>浏览板块: smth &gt; 板块ID<ul>
<li>smth &gt; ITExpress</li>
<li>smth &gt; EconForum                                                                 </li>
</ul>
</li>
<li><a href="https://raw.githubusercontent.com/yrlihuan/smth.alfredworkflow/master/release/smth.alfredworkflo" target="_blank" rel="external">Download Link</a><br><img src="http://7xikfc.com1.z0.glb.clouddn.com/Screen Shot 2015-04-28 at 10.39.55.png" alt=""></li>
</ul>
<hr>
<h2 id="Tips">Tips</h2><ul>
<li>为了方便大家发现、查找、分享优秀实用的 Workflows，<a href="https://github.com/hzlzh" target="_blank" rel="external">hzlzh</a> 制作并维护了<a href="http://www.alfredworkflow.com/" target="_blank" rel="external">http://www.alfredworkflow.com</a> ， 你在上面能找到你所能想得到的所有 Workflows (当然也十分欢迎你将自己制作的 Workflow 分享上去）</li>
<li>如果你喜欢我的 Alfred 主题话，你可以通过：<a href="https://github.com/krv/Yosemite-Dark-Alfred" target="_blank" rel="external">Dark OS X Yosemite (10.10) inspired theme for Alfred v2</a> 下载得到</li>
</ul>
<hr>
<h2 id="期待与你成为朋友">期待与你成为朋友</h2><ul>
<li>Weibo: <a href="http://weibo.com/qiktang" target="_blank" rel="external">汤奇V</a>  </li>
<li>GitHub: <a href="https://github.com/tangqi92" target="_blank" rel="external">tangqi92</a></li>
<li>Blog: <a href="http://itangqi.me/">http://itangqi.me</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>如果你要问我「Mac 上必备的软件有哪些?」<br>那么，<a href="http://www.alfredapp.com/"><strong>Alfred</strong></a> 将会当仁不让地成为我第一个推荐给你的<strong>神器</strong>！（对，你没听错，相信我，它绝对配得上「神器」的称号。）</p>
<p>因为当我用上 Alfred 的那一刻，我便有种相见恨晚的感觉，它极大地提高了我的效率（无论是工作还是生活），事实是，我现在已经离不开它了！</p>]]>
    
    </summary>
    
      <category term="Alfred" scheme="http://itangqi.me/tags/Alfred/"/>
    
      <category term="Workflows" scheme="http://itangqi.me/tags/Workflows/"/>
    
      <category term="Mac" scheme="http://itangqi.me/categories/Mac/"/>
    
  </entry>
  
</feed>
